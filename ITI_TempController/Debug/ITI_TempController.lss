
ITI_TempController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003de0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a0  00800060  00003de0  00003e74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800200  00800200  00004014  2**0
                  ALLOC
  3 .stab         00003030  00000000  00000000  00004014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011d9  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000821d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000839d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00008570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000a57f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000b6ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c6f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000c890  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000cb51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d3ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 30       	cpi	r26, 0x00	; 0
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 30       	cpi	r26, 0x04	; 4
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 1a 	call	0x3424	; 0x3424 <main>
      8a:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ed       	ldi	r26, 0xD0	; 208
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e3 1e 	jmp	0x3dc6	; 0x3dc6 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 db 1e 	jmp	0x3db6	; 0x3db6 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 52       	subi	r30, 0x28	; 40
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <ADC_voidInit>:

pf ADC_pfCall = NULL_PTR ;
uint16 ADC_u16ReadValue ;

void ADC_voidInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
#if ADC_RES_MODE  ==  ADC_8BIT
	SET_BIT(ADCMUX , 5 ) ;
#else 
	CLR_BIT(ADCMUX , 5 ) ;
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 7d       	andi	r24, 0xDF	; 223
     cea:	8c 93       	st	X, r24
	
#if  ADC_VOLTAGE_REF == ADC_AREF
	CLR_BIT(ADCMUX , 6 ) ;
	CLR_BIT(ADCMUX , 7 ) ;
#elif  ADC_VOLTAGE_REF == ADC_AVCC_REF
	SET_BIT(ADCMUX , 6 ) ;
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 64       	ori	r24, 0x40	; 64
     cf8:	8c 93       	st	X, r24
	CLR_BIT(ADCMUX , 7 ) ;
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	8c 93       	st	X, r24
	SET_BIT(ADCMUX , 6 ) ;
	SET_BIT(ADCMUX , 7 ) ;
	
#endif

ADCSRA &= 0b11111000;
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	88 7f       	andi	r24, 0xF8	; 248
     d14:	8c 93       	st	X, r24
ADCSRA |=ADC_PRESCALLER ;
     d16:	a6 e2       	ldi	r26, 0x26	; 38
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e2       	ldi	r30, 0x26	; 38
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	85 60       	ori	r24, 0x05	; 5
     d22:	8c 93       	st	X, r24

#if ADC_TRIGGER_MODE ==ADC_SGL_MODE
    CLR_BIT(ADCSRA , 5) ;
     d24:	a6 e2       	ldi	r26, 0x26	; 38
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e6 e2       	ldi	r30, 0x26	; 38
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8f 7d       	andi	r24, 0xDF	; 223
     d30:	8c 93       	st	X, r24
	SFIOR |=ADC_TRIGGER_MODE<<5;
#endif
	


}
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <ADC_voidEnable>:
void ADC_voidEnable(void)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(ADCSRA , 7);
     d40:	a6 e2       	ldi	r26, 0x26	; 38
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e6 e2       	ldi	r30, 0x26	; 38
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 68       	ori	r24, 0x80	; 128
     d4c:	8c 93       	st	X, r24
}
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <ADC_voidDisable>:
void ADC_voidDisable(void)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA , 7);
     d5c:	a6 e2       	ldi	r26, 0x26	; 38
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e6 e2       	ldi	r30, 0x26	; 38
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8f 77       	andi	r24, 0x7F	; 127
     d68:	8c 93       	st	X, r24
}
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <ADC_voidEnableInterrupt>:
void ADC_voidEnableInterrupt(void)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA , 3);
     d78:	a6 e2       	ldi	r26, 0x26	; 38
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e6 e2       	ldi	r30, 0x26	; 38
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 60       	ori	r24, 0x08	; 8
     d84:	8c 93       	st	X, r24
}
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <ADC_voidDisableInterrupt>:
void ADC_voidDisableInterrupt(void)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA , 3);
     d94:	a6 e2       	ldi	r26, 0x26	; 38
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e6 e2       	ldi	r30, 0x26	; 38
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	8c 93       	st	X, r24
}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <ADC_voidSetCallback>:
void ADC_voidSetCallback(pf pfCallbackCpy)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	00 d0       	rcall	.+0      	; 0xdae <ADC_voidSetCallback+0x6>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
	ADC_pfCall = pfCallbackCpy ;
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	90 93 01 02 	sts	0x0201, r25
     dbe:	80 93 00 02 	sts	0x0200, r24
}
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <ADC_voidStartConversion>:
void ADC_voidStartConversion(uint8 u8ChannelNbCpy)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	89 83       	std	Y+1, r24	; 0x01
	ADCMUX &= 0b11100000  ;
     dd8:	a7 e2       	ldi	r26, 0x27	; 39
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e7 e2       	ldi	r30, 0x27	; 39
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	80 7e       	andi	r24, 0xE0	; 224
     de4:	8c 93       	st	X, r24
	ADCMUX |= u8ChannelNbCpy ;
     de6:	a7 e2       	ldi	r26, 0x27	; 39
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e2       	ldi	r30, 0x27	; 39
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	90 81       	ld	r25, Z
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	89 2b       	or	r24, r25
     df4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , 6) ;
     df6:	a6 e2       	ldi	r26, 0x26	; 38
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e6 e2       	ldi	r30, 0x26	; 38
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	80 64       	ori	r24, 0x40	; 64
     e02:	8c 93       	st	X, r24
}
     e04:	0f 90       	pop	r0
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <ADC_voidChangeMode>:
void ADC_voidChangeMode(uint8 u8ModeCpy)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	0f 92       	push	r0
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	89 83       	std	Y+1, r24	; 0x01
	if (u8ModeCpy < ADC_SGL_MODE )
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	88 30       	cpi	r24, 0x08	; 8
     e1c:	10 f5       	brcc	.+68     	; 0xe62 <ADC_voidChangeMode+0x56>
	{
		SET_BIT(ADCSRA , 5) ;
     e1e:	a6 e2       	ldi	r26, 0x26	; 38
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e6 e2       	ldi	r30, 0x26	; 38
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	80 62       	ori	r24, 0x20	; 32
     e2a:	8c 93       	st	X, r24
		SFIOR &=0b00011111;
     e2c:	a0 e5       	ldi	r26, 0x50	; 80
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e0 e5       	ldi	r30, 0x50	; 80
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8f 71       	andi	r24, 0x1F	; 31
     e38:	8c 93       	st	X, r24
		SFIOR |=u8ModeCpy<<5;
     e3a:	a0 e5       	ldi	r26, 0x50	; 80
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e0 e5       	ldi	r30, 0x50	; 80
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	28 2f       	mov	r18, r24
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	82 95       	swap	r24
     e52:	92 95       	swap	r25
     e54:	90 7f       	andi	r25, 0xF0	; 240
     e56:	98 27       	eor	r25, r24
     e58:	80 7f       	andi	r24, 0xF0	; 240
     e5a:	98 27       	eor	r25, r24
     e5c:	82 2b       	or	r24, r18
     e5e:	8c 93       	st	X, r24
     e60:	0a c0       	rjmp	.+20     	; 0xe76 <ADC_voidChangeMode+0x6a>
	}
	else if (u8ModeCpy == ADC_SGL_MODE)
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	88 30       	cpi	r24, 0x08	; 8
     e66:	39 f4       	brne	.+14     	; 0xe76 <ADC_voidChangeMode+0x6a>
	{
		CLR_BIT(ADCSRA , 5) ;
     e68:	a6 e2       	ldi	r26, 0x26	; 38
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e6 e2       	ldi	r30, 0x26	; 38
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8f 7d       	andi	r24, 0xDF	; 223
     e74:	8c 93       	st	X, r24
	}
	else
	{
		
	}
}
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <ADC_u16ReadSync>:
/* polling */
uint16 ADC_u16ReadSync(uint8 u8ChannelNbCpy)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <ADC_u16ReadSync+0x6>
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 u16ReadValueLoc ;
	ADC_voidStartConversion(u8ChannelNbCpy);
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ADC_voidStartConversion>
	/*wait conversion till finish*/
	while (GET_BIT(ADCSRA , 4) == 0);
     e92:	e6 e2       	ldi	r30, 0x26	; 38
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	82 95       	swap	r24
     e9a:	8f 70       	andi	r24, 0x0F	; 15
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	81 70       	andi	r24, 0x01	; 1
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	a9 f3       	breq	.-22     	; 0xe92 <ADC_u16ReadSync+0x14>
	/*Clear Flag bit*/
	SET_BIT(ADCSRA , 4);
     ea8:	a6 e2       	ldi	r26, 0x26	; 38
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e6 e2       	ldi	r30, 0x26	; 38
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 61       	ori	r24, 0x10	; 16
     eb4:	8c 93       	st	X, r24
	
	#if ADC_RES_MODE == ADC_8BIT
	u16ReadValueLoc =(uint16) ADCH ;
	#else
	u16ReadValueLoc=ADCR;
     eb6:	e4 e2       	ldi	r30, 0x24	; 36
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	89 83       	std	Y+1, r24	; 0x01
	//u16ReadValueLoc = ADCL;
    //u16ReadValueLoc |= (((uint16)ADCH<<8)) ;
	#endif
	
	return u16ReadValueLoc ;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <ADC_u16ReadAsync>:
uint16 ADC_u16ReadAsync(void)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
	return ADC_u16ReadValue ;
     eda:	80 91 02 02 	lds	r24, 0x0202
     ede:	90 91 03 02 	lds	r25, 0x0203
}
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <__vector_16>:

void __vector_16 (void) __attribute__((signal ,used));
void __vector_16 (void) 
{
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	0f 92       	push	r0
     ef0:	11 24       	eor	r1, r1
     ef2:	2f 93       	push	r18
     ef4:	3f 93       	push	r19
     ef6:	4f 93       	push	r20
     ef8:	5f 93       	push	r21
     efa:	6f 93       	push	r22
     efc:	7f 93       	push	r23
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	af 93       	push	r26
     f04:	bf 93       	push	r27
     f06:	ef 93       	push	r30
     f08:	ff 93       	push	r31
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfCall != NULL_PTR)
     f12:	80 91 00 02 	lds	r24, 0x0200
     f16:	90 91 01 02 	lds	r25, 0x0201
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	29 f0       	breq	.+10     	; 0xf28 <__vector_16+0x40>
	{
		ADC_pfCall();
     f1e:	e0 91 00 02 	lds	r30, 0x0200
     f22:	f0 91 01 02 	lds	r31, 0x0201
     f26:	09 95       	icall
	}
	#if ADC_RES_MODE == ADC_8BIT
	ADC_u16ReadValue = ADCH ;
	#else
	ADC_u16ReadValue = ADCL;
     f28:	e4 e2       	ldi	r30, 0x24	; 36
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 03 02 	sts	0x0203, r25
     f36:	80 93 02 02 	sts	0x0202, r24
    ADC_u16ReadValue |= (ADCH<<8) ;
     f3a:	e5 e2       	ldi	r30, 0x25	; 37
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	98 2f       	mov	r25, r24
     f46:	88 27       	eor	r24, r24
     f48:	9c 01       	movw	r18, r24
     f4a:	80 91 02 02 	lds	r24, 0x0202
     f4e:	90 91 03 02 	lds	r25, 0x0203
     f52:	82 2b       	or	r24, r18
     f54:	93 2b       	or	r25, r19
     f56:	90 93 03 02 	sts	0x0203, r25
     f5a:	80 93 02 02 	sts	0x0202, r24
	#endif
	

}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	ff 91       	pop	r31
     f64:	ef 91       	pop	r30
     f66:	bf 91       	pop	r27
     f68:	af 91       	pop	r26
     f6a:	9f 91       	pop	r25
     f6c:	8f 91       	pop	r24
     f6e:	7f 91       	pop	r23
     f70:	6f 91       	pop	r22
     f72:	5f 91       	pop	r21
     f74:	4f 91       	pop	r20
     f76:	3f 91       	pop	r19
     f78:	2f 91       	pop	r18
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <DIO_voidInit>:
#include "DIO_cfg.h"
#include "DIO_priv.h"


void DIO_voidInit(void)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
     f8c:	ea e3       	ldi	r30, 0x3A	; 58
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 e7       	ldi	r24, 0x70	; 112
     f92:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
     f94:	e7 e3       	ldi	r30, 0x37	; 55
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
     f9c:	e4 e3       	ldi	r30, 0x34	; 52
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 ef       	ldi	r24, 0xF0	; 240
     fa2:	80 83       	st	Z, r24
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
     fa4:	e1 e3       	ldi	r30, 0x31	; 49
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	80 83       	st	Z, r24

}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <DIO_enuWritePin>:

tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy,uint8 u8PinValueCpy)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	2b 97       	sbiw	r28, 0x0b	; 11
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	8a 83       	std	Y+2, r24	; 0x02
     fc8:	6b 83       	std	Y+3, r22	; 0x03
	
	tenuErrorStatus enuReturnStateLoc = EOK ;
     fca:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 30       	cpi	r24, 0x08	; 8
     fd0:	d8 f5       	brcc	.+118    	; 0x1048 <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	3b 87       	std	Y+11, r19	; 0x0b
     fda:	2a 87       	std	Y+10, r18	; 0x0a
     fdc:	8a 85       	ldd	r24, Y+10	; 0x0a
     fde:	9b 85       	ldd	r25, Y+11	; 0x0b
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	31 f0       	breq	.+12     	; 0xff0 <DIO_enuWritePin+0x3e>
     fe4:	2a 85       	ldd	r18, Y+10	; 0x0a
     fe6:	3b 85       	ldd	r19, Y+11	; 0x0b
     fe8:	21 30       	cpi	r18, 0x01	; 1
     fea:	31 05       	cpc	r19, r1
     fec:	b1 f0       	breq	.+44     	; 0x101a <DIO_enuWritePin+0x68>
     fee:	29 c0       	rjmp	.+82     	; 0x1042 <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
     ff0:	ab e3       	ldi	r26, 0x3B	; 59
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	eb e3       	ldi	r30, 0x3B	; 59
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_enuWritePin+0x5c>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_enuWritePin+0x58>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	f4 c0       	rjmp	.+488    	; 0x1202 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
    101a:	ab e3       	ldi	r26, 0x3B	; 59
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	eb e3       	ldi	r30, 0x3B	; 59
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_enuWritePin+0x86>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_enuWritePin+0x82>
    103c:	84 2b       	or	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	e0 c0       	rjmp	.+448    	; 0x1202 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	dd c0       	rjmp	.+442    	; 0x1202 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	08 f4       	brcc	.+2      	; 0x1050 <DIO_enuWritePin+0x9e>
    104e:	45 c0       	rjmp	.+138    	; 0x10da <DIO_enuWritePin+0x128>
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	80 31       	cpi	r24, 0x10	; 16
    1054:	08 f0       	brcs	.+2      	; 0x1058 <DIO_enuWritePin+0xa6>
    1056:	41 c0       	rjmp	.+130    	; 0x10da <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	39 87       	std	Y+9, r19	; 0x09
    1060:	28 87       	std	Y+8, r18	; 0x08
    1062:	88 85       	ldd	r24, Y+8	; 0x08
    1064:	99 85       	ldd	r25, Y+9	; 0x09
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	31 f0       	breq	.+12     	; 0x1076 <DIO_enuWritePin+0xc4>
    106a:	28 85       	ldd	r18, Y+8	; 0x08
    106c:	39 85       	ldd	r19, Y+9	; 0x09
    106e:	21 30       	cpi	r18, 0x01	; 1
    1070:	31 05       	cpc	r19, r1
    1072:	c9 f0       	breq	.+50     	; 0x10a6 <DIO_enuWritePin+0xf4>
    1074:	2f c0       	rjmp	.+94     	; 0x10d4 <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8);
    1076:	a8 e3       	ldi	r26, 0x38	; 56
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e8 e3       	ldi	r30, 0x38	; 56
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9c 01       	movw	r18, r24
    108a:	27 70       	andi	r18, 0x07	; 7
    108c:	30 70       	andi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_enuWritePin+0xe8>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_enuWritePin+0xe4>
    109e:	80 95       	com	r24
    10a0:	84 23       	and	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	ae c0       	rjmp	.+348    	; 0x1202 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
    10a6:	a8 e3       	ldi	r26, 0x38	; 56
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e3       	ldi	r30, 0x38	; 56
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9c 01       	movw	r18, r24
    10ba:	27 70       	andi	r18, 0x07	; 7
    10bc:	30 70       	andi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_enuWritePin+0x118>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_enuWritePin+0x114>
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	97 c0       	rjmp	.+302    	; 0x1202 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	94 c0       	rjmp	.+296    	; 0x1202 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	80 31       	cpi	r24, 0x10	; 16
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <DIO_enuWritePin+0x130>
    10e0:	45 c0       	rjmp	.+138    	; 0x116c <DIO_enuWritePin+0x1ba>
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	88 31       	cpi	r24, 0x18	; 24
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <DIO_enuWritePin+0x138>
    10e8:	41 c0       	rjmp	.+130    	; 0x116c <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3f 83       	std	Y+7, r19	; 0x07
    10f2:	2e 83       	std	Y+6, r18	; 0x06
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	31 f0       	breq	.+12     	; 0x1108 <DIO_enuWritePin+0x156>
    10fc:	2e 81       	ldd	r18, Y+6	; 0x06
    10fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1100:	21 30       	cpi	r18, 0x01	; 1
    1102:	31 05       	cpc	r19, r1
    1104:	c9 f0       	breq	.+50     	; 0x1138 <DIO_enuWritePin+0x186>
    1106:	2f c0       	rjmp	.+94     	; 0x1166 <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%8);
    1108:	a5 e3       	ldi	r26, 0x35	; 53
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e3       	ldi	r30, 0x35	; 53
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9c 01       	movw	r18, r24
    111c:	27 70       	andi	r18, 0x07	; 7
    111e:	30 70       	andi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_enuWritePin+0x17a>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_enuWritePin+0x176>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	65 c0       	rjmp	.+202    	; 0x1202 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%8);
    1138:	a5 e3       	ldi	r26, 0x35	; 53
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e5 e3       	ldi	r30, 0x35	; 53
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9c 01       	movw	r18, r24
    114c:	27 70       	andi	r18, 0x07	; 7
    114e:	30 70       	andi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_enuWritePin+0x1aa>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_enuWritePin+0x1a6>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	4e c0       	rjmp	.+156    	; 0x1202 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	4b c0       	rjmp	.+150    	; 0x1202 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	88 31       	cpi	r24, 0x18	; 24
    1170:	08 f4       	brcc	.+2      	; 0x1174 <DIO_enuWritePin+0x1c2>
    1172:	45 c0       	rjmp	.+138    	; 0x11fe <DIO_enuWritePin+0x24c>
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	80 32       	cpi	r24, 0x20	; 32
    1178:	08 f0       	brcs	.+2      	; 0x117c <DIO_enuWritePin+0x1ca>
    117a:	41 c0       	rjmp	.+130    	; 0x11fe <DIO_enuWritePin+0x24c>
	{
		switch (u8PinValueCpy)
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	3d 83       	std	Y+5, r19	; 0x05
    1184:	2c 83       	std	Y+4, r18	; 0x04
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	31 f0       	breq	.+12     	; 0x119a <DIO_enuWritePin+0x1e8>
    118e:	2c 81       	ldd	r18, Y+4	; 0x04
    1190:	3d 81       	ldd	r19, Y+5	; 0x05
    1192:	21 30       	cpi	r18, 0x01	; 1
    1194:	31 05       	cpc	r19, r1
    1196:	c9 f0       	breq	.+50     	; 0x11ca <DIO_enuWritePin+0x218>
    1198:	2f c0       	rjmp	.+94     	; 0x11f8 <DIO_enuWritePin+0x246>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%8);
    119a:	a2 e3       	ldi	r26, 0x32	; 50
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e2 e3       	ldi	r30, 0x32	; 50
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9c 01       	movw	r18, r24
    11ae:	27 70       	andi	r18, 0x07	; 7
    11b0:	30 70       	andi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_enuWritePin+0x20c>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_enuWritePin+0x208>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	1c c0       	rjmp	.+56     	; 0x1202 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%8);
    11ca:	a2 e3       	ldi	r26, 0x32	; 50
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e2 e3       	ldi	r30, 0x32	; 50
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9c 01       	movw	r18, r24
    11de:	27 70       	andi	r18, 0x07	; 7
    11e0:	30 70       	andi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_enuWritePin+0x23c>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_enuWritePin+0x238>
    11f2:	84 2b       	or	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_enuWritePin+0x250>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
    1202:	89 81       	ldd	r24, Y+1	; 0x01
	
}     
    1204:	2b 96       	adiw	r28, 0x0b	; 11
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy ,uint8 * pu8PinValueCpy )
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <DIO_enuReadPin+0x6>
    121c:	00 d0       	rcall	.+0      	; 0x121e <DIO_enuReadPin+0x8>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	7c 83       	std	Y+4, r23	; 0x04
    1226:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
    1228:	19 82       	std	Y+1, r1	; 0x01
	
	if (pu8PinValueCpy != NULL_PTR)
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	09 f4       	brne	.+2      	; 0x1234 <DIO_enuReadPin+0x1e>
    1232:	6e c0       	rjmp	.+220    	; 0x1310 <DIO_enuReadPin+0xfa>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	88 30       	cpi	r24, 0x08	; 8
    1238:	a0 f4       	brcc	.+40     	; 0x1262 <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
    123a:	e9 e3       	ldi	r30, 0x39	; 57
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	a9 01       	movw	r20, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_enuReadPin+0x3c>
    124e:	55 95       	asr	r21
    1250:	47 95       	ror	r20
    1252:	8a 95       	dec	r24
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_enuReadPin+0x38>
    1256:	ca 01       	movw	r24, r20
    1258:	81 70       	andi	r24, 0x01	; 1
    125a:	eb 81       	ldd	r30, Y+3	; 0x03
    125c:	fc 81       	ldd	r31, Y+4	; 0x04
    125e:	80 83       	st	Z, r24
    1260:	59 c0       	rjmp	.+178    	; 0x1314 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	88 30       	cpi	r24, 0x08	; 8
    1266:	c8 f0       	brcs	.+50     	; 0x129a <DIO_enuReadPin+0x84>
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 31       	cpi	r24, 0x10	; 16
    126c:	b0 f4       	brcc	.+44     	; 0x129a <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);		
    126e:	e6 e3       	ldi	r30, 0x36	; 54
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	87 70       	andi	r24, 0x07	; 7
    1280:	90 70       	andi	r25, 0x00	; 0
    1282:	a9 01       	movw	r20, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_enuReadPin+0x74>
    1286:	55 95       	asr	r21
    1288:	47 95       	ror	r20
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_enuReadPin+0x70>
    128e:	ca 01       	movw	r24, r20
    1290:	81 70       	andi	r24, 0x01	; 1
    1292:	eb 81       	ldd	r30, Y+3	; 0x03
    1294:	fc 81       	ldd	r31, Y+4	; 0x04
    1296:	80 83       	st	Z, r24
    1298:	3d c0       	rjmp	.+122    	; 0x1314 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 31       	cpi	r24, 0x10	; 16
    129e:	c8 f0       	brcs	.+50     	; 0x12d2 <DIO_enuReadPin+0xbc>
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	88 31       	cpi	r24, 0x18	; 24
    12a4:	b0 f4       	brcc	.+44     	; 0x12d2 <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%8);
    12a6:	e3 e3       	ldi	r30, 0x33	; 51
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	87 70       	andi	r24, 0x07	; 7
    12b8:	90 70       	andi	r25, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_enuReadPin+0xac>
    12be:	55 95       	asr	r21
    12c0:	47 95       	ror	r20
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_enuReadPin+0xa8>
    12c6:	ca 01       	movw	r24, r20
    12c8:	81 70       	andi	r24, 0x01	; 1
    12ca:	eb 81       	ldd	r30, Y+3	; 0x03
    12cc:	fc 81       	ldd	r31, Y+4	; 0x04
    12ce:	80 83       	st	Z, r24
    12d0:	21 c0       	rjmp	.+66     	; 0x1314 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	88 31       	cpi	r24, 0x18	; 24
    12d6:	c8 f0       	brcs	.+50     	; 0x130a <DIO_enuReadPin+0xf4>
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	80 32       	cpi	r24, 0x20	; 32
    12dc:	b0 f4       	brcc	.+44     	; 0x130a <DIO_enuReadPin+0xf4>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%8);
    12de:	e0 e3       	ldi	r30, 0x30	; 48
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	87 70       	andi	r24, 0x07	; 7
    12f0:	90 70       	andi	r25, 0x00	; 0
    12f2:	a9 01       	movw	r20, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_enuReadPin+0xe4>
    12f6:	55 95       	asr	r21
    12f8:	47 95       	ror	r20
    12fa:	8a 95       	dec	r24
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_enuReadPin+0xe0>
    12fe:	ca 01       	movw	r24, r20
    1300:	81 70       	andi	r24, 0x01	; 1
    1302:	eb 81       	ldd	r30, Y+3	; 0x03
    1304:	fc 81       	ldd	r31, Y+4	; 0x04
    1306:	80 83       	st	Z, r24
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <DIO_enuReadPin+0xfe>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_enuReadPin+0xfe>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
	
}          
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(uint8 u8PinNumCpy, uint8 u8StateCpy)        
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <DIO_enuStatePullup+0x6>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);	
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	6a 81       	ldd	r22, Y+2	; 0x02
    1336:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <DIO_enuWriteGroup>:

tenuErrorStatus DIO_enuWriteGroup(uint8 *pau8PinNumCpy,uint8 * pau8PinValueCpy , uint8 u8SizeCpy)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	28 97       	sbiw	r28, 0x08	; 8
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	7e 83       	std	Y+6, r23	; 0x06
    135e:	6d 83       	std	Y+5, r22	; 0x05
    1360:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK ;
    1362:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc< u8SizeCpy ; u8CntrLoc++)
    1364:	19 82       	std	Y+1, r1	; 0x01
    1366:	1d c0       	rjmp	.+58     	; 0x13a2 <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	fc 01       	movw	r30, r24
    1374:	e2 0f       	add	r30, r18
    1376:	f3 1f       	adc	r31, r19
    1378:	40 81       	ld	r20, Z
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	fc 01       	movw	r30, r24
    1386:	e2 0f       	add	r30, r18
    1388:	f3 1f       	adc	r31, r19
    138a:	90 81       	ld	r25, Z
    138c:	84 2f       	mov	r24, r20
    138e:	69 2f       	mov	r22, r25
    1390:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
    1394:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc !=EOK)
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	88 23       	and	r24, r24
    139a:	39 f4       	brne	.+14     	; 0x13aa <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(uint8 *pau8PinNumCpy,uint8 * pau8PinValueCpy , uint8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK ;
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc< u8SizeCpy ; u8CntrLoc++)
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	8f 5f       	subi	r24, 0xFF	; 255
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	99 81       	ldd	r25, Y+1	; 0x01
    13a4:	8f 81       	ldd	r24, Y+7	; 0x07
    13a6:	98 17       	cp	r25, r24
    13a8:	f8 f2       	brcs	.-66     	; 0x1368 <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc !=EOK)
		{
			break;
		}
	}
}
    13aa:	28 96       	adiw	r28, 0x08	; 8
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <EEPROM_voidWriteByte>:

#include "EEPROM.h"
#include "EEPROM_priv.h"

void EEPROM_voidWriteByte(uint8 DataCpy,uint16 AddressCpy)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <EEPROM_voidWriteByte+0x6>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	7b 83       	std	Y+3, r23	; 0x03
    13cc:	6a 83       	std	Y+2, r22	; 0x02
	while(GET_BIT(EECR,EECR_EEWE)==1);
    13ce:	ec e3       	ldi	r30, 0x3C	; 60
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	86 95       	lsr	r24
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	81 70       	andi	r24, 0x01	; 1
    13dc:	90 70       	andi	r25, 0x00	; 0
    13de:	88 23       	and	r24, r24
    13e0:	b1 f7       	brne	.-20     	; 0x13ce <EEPROM_voidWriteByte+0x12>
	EEAR=AddressCpy&0x03FF;
    13e2:	ee e3       	ldi	r30, 0x3E	; 62
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	93 70       	andi	r25, 0x03	; 3
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
	EEDR=DataCpy;
    13f0:	ed e3       	ldi	r30, 0x3D	; 61
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	80 83       	st	Z, r24
	EECR=0b00000100;
    13f8:	ec e3       	ldi	r30, 0x3C	; 60
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	84 e0       	ldi	r24, 0x04	; 4
    13fe:	80 83       	st	Z, r24
	EECR=0b00000010;
    1400:	ec e3       	ldi	r30, 0x3C	; 60
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	80 83       	st	Z, r24
	//_delay_ms(10);
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <EEPROM_u8ReadByte>:
uint8 EEPROM_u8ReadByte(uint16 AddressCpy)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <EEPROM_u8ReadByte+0x6>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(EECR,EECR_EEWE)==1);
    1422:	ec e3       	ldi	r30, 0x3C	; 60
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	86 95       	lsr	r24
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	90 70       	andi	r25, 0x00	; 0
    1432:	88 23       	and	r24, r24
    1434:	b1 f7       	brne	.-20     	; 0x1422 <EEPROM_u8ReadByte+0xe>
	EEAR=AddressCpy&0x03FF;
    1436:	ee e3       	ldi	r30, 0x3E	; 62
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	93 70       	andi	r25, 0x03	; 3
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	80 83       	st	Z, r24
	SET_BIT(EECR,EECR_EERE);
    1444:	ac e3       	ldi	r26, 0x3C	; 60
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ec e3       	ldi	r30, 0x3C	; 60
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	81 60       	ori	r24, 0x01	; 1
    1450:	8c 93       	st	X, r24
	return EEDR;
    1452:	ed e3       	ldi	r30, 0x3D	; 61
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
}
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <EEPROM_voidEnableINT>:
void EEPROM_voidEnableINT(void)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EECR,EECR_EERIE);
    146a:	ac e3       	ldi	r26, 0x3C	; 60
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ec e3       	ldi	r30, 0x3C	; 60
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	88 60       	ori	r24, 0x08	; 8
    1476:	8c 93       	st	X, r24
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <KEYPAD_voidInit>:
#include "KEYPAD_cfg.h"
#include "KEYPAD_priv.h"


void KEYPAD_voidInit(void)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <KEYPAD_voidInit+0x6>
    1484:	0f 92       	push	r0
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc ;
	uint8 u8InputCntrLoc ;
	uint8 u8OutputCntrLoc ;
	/* loop on all cfg keypads*/
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM ; u8CntrLoc++)
    148a:	1b 82       	std	Y+3, r1	; 0x03
    148c:	65 c0       	rjmp	.+202    	; 0x1558 <KEYPAD_voidInit+0xda>
	{
		/* all inputs activate pull up resistor     */
		for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrConfigSet[u8CntrLoc].u8InputPinsNum; u8InputCntrLoc++)
    148e:	1a 82       	std	Y+2, r1	; 0x02
    1490:	1c c0       	rjmp	.+56     	; 0x14ca <KEYPAD_voidInit+0x4c>
		{
			DIO_enuStatePullup(KEYPAD_astrConfigSet[u8CntrLoc].au8InputPins[u8InputCntrLoc],DIO_ACTIVATE);
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	48 2f       	mov	r20, r24
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	c9 01       	movw	r24, r18
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	9c 01       	movw	r18, r24
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	84 0f       	add	r24, r20
    14b4:	95 1f       	adc	r25, r21
    14b6:	fc 01       	movw	r30, r24
    14b8:	e8 52       	subi	r30, 0x28	; 40
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	80 81       	ld	r24, Z
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	0e 94 92 09 	call	0x1324	; 0x1324 <DIO_enuStatePullup>
	uint8 u8OutputCntrLoc ;
	/* loop on all cfg keypads*/
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM ; u8CntrLoc++)
	{
		/* all inputs activate pull up resistor     */
		for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrConfigSet[u8CntrLoc].u8InputPinsNum; u8InputCntrLoc++)
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	8f 5f       	subi	r24, 0xFF	; 255
    14c8:	8a 83       	std	Y+2, r24	; 0x02
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	9c 01       	movw	r18, r24
    14d6:	22 0f       	add	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	22 0f       	add	r18, r18
    14dc:	33 1f       	adc	r19, r19
    14de:	82 0f       	add	r24, r18
    14e0:	93 1f       	adc	r25, r19
    14e2:	fc 01       	movw	r30, r24
    14e4:	e0 52       	subi	r30, 0x20	; 32
    14e6:	fe 4f       	sbci	r31, 0xFE	; 254
    14e8:	90 81       	ld	r25, Z
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	89 17       	cp	r24, r25
    14ee:	88 f2       	brcs	.-94     	; 0x1492 <KEYPAD_voidInit+0x14>
		{
			DIO_enuStatePullup(KEYPAD_astrConfigSet[u8CntrLoc].au8InputPins[u8InputCntrLoc],DIO_ACTIVATE);
		}
		
		/* all output seq ones no switch under test */
		for (u8OutputCntrLoc = 0 ; u8OutputCntrLoc < KEYPAD_astrConfigSet[u8CntrLoc].u8OutputPinsNum; u8OutputCntrLoc++)
    14f0:	19 82       	std	Y+1, r1	; 0x01
    14f2:	1c c0       	rjmp	.+56     	; 0x152c <KEYPAD_voidInit+0xae>
		{
			DIO_enuWritePin(KEYPAD_astrConfigSet[u8CntrLoc].au8OutputPins[u8OutputCntrLoc], DIO_HIGH);
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	48 2f       	mov	r20, r24
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	c9 01       	movw	r24, r18
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	9c 01       	movw	r18, r24
    1508:	22 0f       	add	r18, r18
    150a:	33 1f       	adc	r19, r19
    150c:	22 0f       	add	r18, r18
    150e:	33 1f       	adc	r19, r19
    1510:	82 0f       	add	r24, r18
    1512:	93 1f       	adc	r25, r19
    1514:	84 0f       	add	r24, r20
    1516:	95 1f       	adc	r25, r21
    1518:	fc 01       	movw	r30, r24
    151a:	e4 52       	subi	r30, 0x24	; 36
    151c:	fe 4f       	sbci	r31, 0xFE	; 254
    151e:	80 81       	ld	r24, Z
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
		{
			DIO_enuStatePullup(KEYPAD_astrConfigSet[u8CntrLoc].au8InputPins[u8InputCntrLoc],DIO_ACTIVATE);
		}
		
		/* all output seq ones no switch under test */
		for (u8OutputCntrLoc = 0 ; u8OutputCntrLoc < KEYPAD_astrConfigSet[u8CntrLoc].u8OutputPinsNum; u8OutputCntrLoc++)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	8f 5f       	subi	r24, 0xFF	; 255
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	9c 01       	movw	r18, r24
    1538:	22 0f       	add	r18, r18
    153a:	33 1f       	adc	r19, r19
    153c:	22 0f       	add	r18, r18
    153e:	33 1f       	adc	r19, r19
    1540:	82 0f       	add	r24, r18
    1542:	93 1f       	adc	r25, r19
    1544:	fc 01       	movw	r30, r24
    1546:	ef 51       	subi	r30, 0x1F	; 31
    1548:	fe 4f       	sbci	r31, 0xFE	; 254
    154a:	90 81       	ld	r25, Z
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	89 17       	cp	r24, r25
    1550:	88 f2       	brcs	.-94     	; 0x14f4 <KEYPAD_voidInit+0x76>
{
	uint8 u8CntrLoc ;
	uint8 u8InputCntrLoc ;
	uint8 u8OutputCntrLoc ;
	/* loop on all cfg keypads*/
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM ; u8CntrLoc++)
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	8f 5f       	subi	r24, 0xFF	; 255
    1556:	8b 83       	std	Y+3, r24	; 0x03
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	88 23       	and	r24, r24
    155c:	09 f4       	brne	.+2      	; 0x1560 <KEYPAD_voidInit+0xe2>
    155e:	97 cf       	rjmp	.-210    	; 0x148e <KEYPAD_voidInit+0x10>
			DIO_enuWritePin(KEYPAD_astrConfigSet[u8CntrLoc].au8OutputPins[u8OutputCntrLoc], DIO_HIGH);
		}
		
	}
	
}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <KEYPAD_u8GetPressedKey>:

uint8 KEYPAD_u8GetPressedKey(uint8 u8KeyPadIdxCpy)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	63 97       	sbiw	r28, 0x13	; 19
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	8b 8b       	std	Y+19, r24	; 0x13
	uint8  u8SeqCntrLoc ;
	uint16 u16InputReadingLoc ;
	uint8  u8ReturnKeyLoc = 0xFF;
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	8f 87       	std	Y+15, r24	; 0x0f
	for (u8SeqCntrLoc = 0 ; u8SeqCntrLoc < KEYPAD_astrConfigSet[u8KeyPadIdxCpy].u8OutputPinsNum; u8SeqCntrLoc++)
    1586:	1a 8a       	std	Y+18, r1	; 0x12
    1588:	89 c0       	rjmp	.+274    	; 0x169c <KEYPAD_u8GetPressedKey+0x130>
	{
		/* seq u8SeqCntrLoc*/
		voidWriteSeq(u8KeyPadIdxCpy ,u8SeqCntrLoc);
    158a:	8b 89       	ldd	r24, Y+19	; 0x13
    158c:	6a 89       	ldd	r22, Y+18	; 0x12
    158e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <voidWriteSeq>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a8 e4       	ldi	r26, 0x48	; 72
    1598:	b2 e4       	ldi	r27, 0x42	; 66
    159a:	8b 87       	std	Y+11, r24	; 0x0b
    159c:	9c 87       	std	Y+12, r25	; 0x0c
    159e:	ad 87       	std	Y+13, r26	; 0x0d
    15a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a ef       	ldi	r20, 0xFA	; 250
    15b0:	54 e4       	ldi	r21, 0x44	; 68
    15b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8f 83       	std	Y+7, r24	; 0x07
    15bc:	98 87       	std	Y+8, r25	; 0x08
    15be:	a9 87       	std	Y+9, r26	; 0x09
    15c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15c2:	6f 81       	ldd	r22, Y+7	; 0x07
    15c4:	78 85       	ldd	r23, Y+8	; 0x08
    15c6:	89 85       	ldd	r24, Y+9	; 0x09
    15c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <KEYPAD_u8GetPressedKey+0x78>
		__ticks = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9e 83       	std	Y+6, r25	; 0x06
    15e0:	8d 83       	std	Y+5, r24	; 0x05
    15e2:	3f c0       	rjmp	.+126    	; 0x1662 <KEYPAD_u8GetPressedKey+0xf6>
	else if (__tmp > 65535)
    15e4:	6f 81       	ldd	r22, Y+7	; 0x07
    15e6:	78 85       	ldd	r23, Y+8	; 0x08
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f8:	18 16       	cp	r1, r24
    15fa:	4c f5       	brge	.+82     	; 0x164e <KEYPAD_u8GetPressedKey+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1600:	8d 85       	ldd	r24, Y+13	; 0x0d
    1602:	9e 85       	ldd	r25, Y+14	; 0x0e
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	8d 83       	std	Y+5, r24	; 0x05
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <KEYPAD_u8GetPressedKey+0xd8>
    1626:	88 ec       	ldi	r24, 0xC8	; 200
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9c 83       	std	Y+4, r25	; 0x04
    162c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <KEYPAD_u8GetPressedKey+0xc6>
    1636:	9c 83       	std	Y+4, r25	; 0x04
    1638:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	69 f7       	brne	.-38     	; 0x1626 <KEYPAD_u8GetPressedKey+0xba>
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <KEYPAD_u8GetPressedKey+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	9a 83       	std	Y+2, r25	; 0x02
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <KEYPAD_u8GetPressedKey+0x102>
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
	    /*delay*/
		_delay_ms(50);
	    /*Read inputs*/
		u16InputReadingLoc = u16ReadInputs(u8KeyPadIdxCpy);
    1676:	8b 89       	ldd	r24, Y+19	; 0x13
    1678:	0e 94 ca 0b 	call	0x1794	; 0x1794 <u16ReadInputs>
    167c:	99 8b       	std	Y+17, r25	; 0x11
    167e:	88 8b       	std	Y+16, r24	; 0x10
	    //check break ;FF
		u8ReturnKeyLoc = u8CheckReading(u8KeyPadIdxCpy, u8SeqCntrLoc,u16InputReadingLoc);
    1680:	28 89       	ldd	r18, Y+16	; 0x10
    1682:	39 89       	ldd	r19, Y+17	; 0x11
    1684:	8b 89       	ldd	r24, Y+19	; 0x13
    1686:	6a 89       	ldd	r22, Y+18	; 0x12
    1688:	a9 01       	movw	r20, r18
    168a:	0e 94 2d 0c 	call	0x185a	; 0x185a <u8CheckReading>
    168e:	8f 87       	std	Y+15, r24	; 0x0f
		if(u8ReturnKeyLoc != 0xFF)
    1690:	8f 85       	ldd	r24, Y+15	; 0x0f
    1692:	8f 3f       	cpi	r24, 0xFF	; 255
    1694:	b9 f4       	brne	.+46     	; 0x16c4 <KEYPAD_u8GetPressedKey+0x158>
uint8 KEYPAD_u8GetPressedKey(uint8 u8KeyPadIdxCpy)
{
	uint8  u8SeqCntrLoc ;
	uint16 u16InputReadingLoc ;
	uint8  u8ReturnKeyLoc = 0xFF;
	for (u8SeqCntrLoc = 0 ; u8SeqCntrLoc < KEYPAD_astrConfigSet[u8KeyPadIdxCpy].u8OutputPinsNum; u8SeqCntrLoc++)
    1696:	8a 89       	ldd	r24, Y+18	; 0x12
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	8a 8b       	std	Y+18, r24	; 0x12
    169c:	8b 89       	ldd	r24, Y+19	; 0x13
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	9c 01       	movw	r18, r24
    16a8:	22 0f       	add	r18, r18
    16aa:	33 1f       	adc	r19, r19
    16ac:	22 0f       	add	r18, r18
    16ae:	33 1f       	adc	r19, r19
    16b0:	82 0f       	add	r24, r18
    16b2:	93 1f       	adc	r25, r19
    16b4:	fc 01       	movw	r30, r24
    16b6:	ef 51       	subi	r30, 0x1F	; 31
    16b8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ba:	90 81       	ld	r25, Z
    16bc:	8a 89       	ldd	r24, Y+18	; 0x12
    16be:	89 17       	cp	r24, r25
    16c0:	08 f4       	brcc	.+2      	; 0x16c4 <KEYPAD_u8GetPressedKey+0x158>
    16c2:	63 cf       	rjmp	.-314    	; 0x158a <KEYPAD_u8GetPressedKey+0x1e>
			break;
		}
		
	}
	
	return u8ReturnKeyLoc ;
    16c4:	8f 85       	ldd	r24, Y+15	; 0x0f
	
	
}
    16c6:	63 96       	adiw	r28, 0x13	; 19
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <voidWriteSeq>:

static void voidWriteSeq(uint8 u8KeyPadIdxCpy , uint8 u8SeqIdxCpy)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	00 d0       	rcall	.+0      	; 0x16de <voidWriteSeq+0x6>
    16de:	0f 92       	push	r0
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    16e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CntrLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_astrConfigSet[u8KeyPadIdxCpy].u8OutputPinsNum; u8CntrLoc++)
    16e8:	19 82       	std	Y+1, r1	; 0x01
    16ea:	3a c0       	rjmp	.+116    	; 0x1760 <voidWriteSeq+0x88>
	{
		if (u8CntrLoc == u8SeqIdxCpy)
    16ec:	99 81       	ldd	r25, Y+1	; 0x01
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	98 17       	cp	r25, r24
    16f2:	d1 f4       	brne	.+52     	; 0x1728 <voidWriteSeq+0x50>
		{
			DIO_enuWritePin(KEYPAD_astrConfigSet[u8KeyPadIdxCpy].au8OutputPins[u8CntrLoc], DIO_LOW);	
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	48 2f       	mov	r20, r24
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	c9 01       	movw	r24, r18
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	9c 01       	movw	r18, r24
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	22 0f       	add	r18, r18
    170e:	33 1f       	adc	r19, r19
    1710:	82 0f       	add	r24, r18
    1712:	93 1f       	adc	r25, r19
    1714:	84 0f       	add	r24, r20
    1716:	95 1f       	adc	r25, r21
    1718:	fc 01       	movw	r30, r24
    171a:	e4 52       	subi	r30, 0x24	; 36
    171c:	fe 4f       	sbci	r31, 0xFE	; 254
    171e:	80 81       	ld	r24, Z
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
    1726:	19 c0       	rjmp	.+50     	; 0x175a <voidWriteSeq+0x82>
		}
		else
		{
    		DIO_enuWritePin(KEYPAD_astrConfigSet[u8KeyPadIdxCpy].au8OutputPins[u8CntrLoc], DIO_HIGH);	
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	48 2f       	mov	r20, r24
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	c9 01       	movw	r24, r18
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	9c 01       	movw	r18, r24
    173c:	22 0f       	add	r18, r18
    173e:	33 1f       	adc	r19, r19
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	82 0f       	add	r24, r18
    1746:	93 1f       	adc	r25, r19
    1748:	84 0f       	add	r24, r20
    174a:	95 1f       	adc	r25, r21
    174c:	fc 01       	movw	r30, r24
    174e:	e4 52       	subi	r30, 0x24	; 36
    1750:	fe 4f       	sbci	r31, 0xFE	; 254
    1752:	80 81       	ld	r24, Z
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
}

static void voidWriteSeq(uint8 u8KeyPadIdxCpy , uint8 u8SeqIdxCpy)
{
	uint8 u8CntrLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_astrConfigSet[u8KeyPadIdxCpy].u8OutputPinsNum; u8CntrLoc++)
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	8f 5f       	subi	r24, 0xFF	; 255
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	9c 01       	movw	r18, r24
    176c:	22 0f       	add	r18, r18
    176e:	33 1f       	adc	r19, r19
    1770:	22 0f       	add	r18, r18
    1772:	33 1f       	adc	r19, r19
    1774:	82 0f       	add	r24, r18
    1776:	93 1f       	adc	r25, r19
    1778:	fc 01       	movw	r30, r24
    177a:	ef 51       	subi	r30, 0x1F	; 31
    177c:	fe 4f       	sbci	r31, 0xFE	; 254
    177e:	90 81       	ld	r25, Z
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	89 17       	cp	r24, r25
    1784:	08 f4       	brcc	.+2      	; 0x1788 <voidWriteSeq+0xb0>
    1786:	b2 cf       	rjmp	.-156    	; 0x16ec <voidWriteSeq+0x14>
		}
		
	}
	
	
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <u16ReadInputs>:


static uint16 u16ReadInputs(uint8 u8KeyPadIdxCpy)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <u16ReadInputs+0x6>
    179a:	00 d0       	rcall	.+0      	; 0x179c <u16ReadInputs+0x8>
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	8d 83       	std	Y+5, r24	; 0x05
	uint16 u16ReturnReadingLoc = 0xFFFF ;
    17a4:	8f ef       	ldi	r24, 0xFF	; 255
    17a6:	9f ef       	ldi	r25, 0xFF	; 255
    17a8:	9b 83       	std	Y+3, r25	; 0x03
    17aa:	8a 83       	std	Y+2, r24	; 0x02
    uint8  u8InputCntrLoc             ;   
	uint8  u8TempReadingLoc  =     0  ;
    17ac:	1c 82       	std	Y+4, r1	; 0x04
	for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrConfigSet[u8KeyPadIdxCpy].u8InputPinsNum; u8InputCntrLoc++)
    17ae:	19 82       	std	Y+1, r1	; 0x01
    17b0:	36 c0       	rjmp	.+108    	; 0x181e <u16ReadInputs+0x8a>
	{
	  DIO_enuReadPin(KEYPAD_astrConfigSet[u8KeyPadIdxCpy].au8InputPins[u8InputCntrLoc],&u8TempReadingLoc);
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	48 2f       	mov	r20, r24
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	c9 01       	movw	r24, r18
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	9c 01       	movw	r18, r24
    17c6:	22 0f       	add	r18, r18
    17c8:	33 1f       	adc	r19, r19
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	82 0f       	add	r24, r18
    17d0:	93 1f       	adc	r25, r19
    17d2:	84 0f       	add	r24, r20
    17d4:	95 1f       	adc	r25, r21
    17d6:	fc 01       	movw	r30, r24
    17d8:	e8 52       	subi	r30, 0x28	; 40
    17da:	fe 4f       	sbci	r31, 0xFE	; 254
    17dc:	80 81       	ld	r24, Z
    17de:	9e 01       	movw	r18, r28
    17e0:	2c 5f       	subi	r18, 0xFC	; 252
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	b9 01       	movw	r22, r18
    17e6:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_enuReadPin>
	  if (u8TempReadingLoc == 0)
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	88 23       	and	r24, r24
    17ee:	a1 f4       	brne	.+40     	; 0x1818 <u16ReadInputs+0x84>
	  {
		 CLR_BIT(u16ReturnReadingLoc , u8InputCntrLoc );
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <u16ReadInputs+0x6c>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	2a 95       	dec	r18
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <u16ReadInputs+0x68>
    1804:	80 95       	com	r24
    1806:	90 95       	com	r25
    1808:	9c 01       	movw	r18, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	9b 81       	ldd	r25, Y+3	; 0x03
    180e:	82 23       	and	r24, r18
    1810:	93 23       	and	r25, r19
    1812:	9b 83       	std	Y+3, r25	; 0x03
    1814:	8a 83       	std	Y+2, r24	; 0x02
    1816:	17 c0       	rjmp	.+46     	; 0x1846 <u16ReadInputs+0xb2>
static uint16 u16ReadInputs(uint8 u8KeyPadIdxCpy)
{
	uint16 u16ReturnReadingLoc = 0xFFFF ;
    uint8  u8InputCntrLoc             ;   
	uint8  u8TempReadingLoc  =     0  ;
	for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrConfigSet[u8KeyPadIdxCpy].u8InputPinsNum; u8InputCntrLoc++)
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	8f 5f       	subi	r24, 0xFF	; 255
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	9c 01       	movw	r18, r24
    182a:	22 0f       	add	r18, r18
    182c:	33 1f       	adc	r19, r19
    182e:	22 0f       	add	r18, r18
    1830:	33 1f       	adc	r19, r19
    1832:	82 0f       	add	r24, r18
    1834:	93 1f       	adc	r25, r19
    1836:	fc 01       	movw	r30, r24
    1838:	e0 52       	subi	r30, 0x20	; 32
    183a:	fe 4f       	sbci	r31, 0xFE	; 254
    183c:	90 81       	ld	r25, Z
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	89 17       	cp	r24, r25
    1842:	08 f4       	brcc	.+2      	; 0x1846 <u16ReadInputs+0xb2>
    1844:	b6 cf       	rjmp	.-148    	; 0x17b2 <u16ReadInputs+0x1e>
		 CLR_BIT(u16ReturnReadingLoc , u8InputCntrLoc );
		 break ;
	  }
  
	}
	return u16ReturnReadingLoc ;
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	9b 81       	ldd	r25, Y+3	; 0x03
	
}
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <u8CheckReading>:


static uint8 u8CheckReading(uint8 u8KeyPadIdxCpy , uint8 u8SeqIdxCpy, uint16 u16InputReadingCpy )
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	27 97       	sbiw	r28, 0x07	; 7
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	8c 83       	std	Y+4, r24	; 0x04
    1870:	6d 83       	std	Y+5, r22	; 0x05
    1872:	5f 83       	std	Y+7, r21	; 0x07
    1874:	4e 83       	std	Y+6, r20	; 0x06
	uint8 u8ReturnKeyLoc ;
	uint8 u8InputCntrLoc ;
	uint8 u8InputBitLoc  ;
	
	if (u16InputReadingCpy == 0xFFFF)
    1876:	8e 81       	ldd	r24, Y+6	; 0x06
    1878:	9f 81       	ldd	r25, Y+7	; 0x07
    187a:	2f ef       	ldi	r18, 0xFF	; 255
    187c:	8f 3f       	cpi	r24, 0xFF	; 255
    187e:	92 07       	cpc	r25, r18
    1880:	19 f4       	brne	.+6      	; 0x1888 <u8CheckReading+0x2e>
	{
		u8ReturnKeyLoc = 0xFF ;
    1882:	8f ef       	ldi	r24, 0xFF	; 255
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	45 c0       	rjmp	.+138    	; 0x1912 <u8CheckReading+0xb8>
	}
	else
	{
		for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrConfigSet[u8KeyPadIdxCpy].u8InputPinsNum; u8InputCntrLoc++)
    1888:	1a 82       	std	Y+2, r1	; 0x02
    188a:	2f c0       	rjmp	.+94     	; 0x18ea <u8CheckReading+0x90>
		{
		   u8InputBitLoc =  GET_BIT(u16InputReadingCpy ,u8InputCntrLoc );
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	8e 81       	ldd	r24, Y+6	; 0x06
    1894:	9f 81       	ldd	r25, Y+7	; 0x07
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <u8CheckReading+0x44>
    189a:	96 95       	lsr	r25
    189c:	87 95       	ror	r24
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <u8CheckReading+0x40>
    18a2:	81 70       	andi	r24, 0x01	; 1
    18a4:	89 83       	std	Y+1, r24	; 0x01
		   if (u8InputBitLoc == 0) 
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	88 23       	and	r24, r24
    18aa:	e1 f4       	brne	.+56     	; 0x18e4 <u8CheckReading+0x8a>
		   {
			    // input  --> u8InputCntrLoc  output   --> u8SeqIdxCpy
			   
			   u8ReturnKeyLoc = KEYPAD_au8Mapping[u8KeyPadIdxCpy][u8SeqIdxCpy][u8InputCntrLoc] ;
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	68 2f       	mov	r22, r24
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	48 2f       	mov	r20, r24
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	cb 01       	movw	r24, r22
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	82 0f       	add	r24, r18
    18ca:	93 1f       	adc	r25, r19
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	84 0f       	add	r24, r20
    18d6:	95 1f       	adc	r25, r21
    18d8:	fc 01       	movw	r30, r24
    18da:	ee 51       	subi	r30, 0x1E	; 30
    18dc:	fe 4f       	sbci	r31, 0xFE	; 254
    18de:	80 81       	ld	r24, Z
    18e0:	8b 83       	std	Y+3, r24	; 0x03
    18e2:	17 c0       	rjmp	.+46     	; 0x1912 <u8CheckReading+0xb8>
	{
		u8ReturnKeyLoc = 0xFF ;
	}
	else
	{
		for (u8InputCntrLoc = 0 ; u8InputCntrLoc < KEYPAD_astrConfigSet[u8KeyPadIdxCpy].u8InputPinsNum; u8InputCntrLoc++)
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	8f 5f       	subi	r24, 0xFF	; 255
    18e8:	8a 83       	std	Y+2, r24	; 0x02
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	9c 01       	movw	r18, r24
    18f6:	22 0f       	add	r18, r18
    18f8:	33 1f       	adc	r19, r19
    18fa:	22 0f       	add	r18, r18
    18fc:	33 1f       	adc	r19, r19
    18fe:	82 0f       	add	r24, r18
    1900:	93 1f       	adc	r25, r19
    1902:	fc 01       	movw	r30, r24
    1904:	e0 52       	subi	r30, 0x20	; 32
    1906:	fe 4f       	sbci	r31, 0xFE	; 254
    1908:	90 81       	ld	r25, Z
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	89 17       	cp	r24, r25
    190e:	08 f4       	brcc	.+2      	; 0x1912 <u8CheckReading+0xb8>
    1910:	bd cf       	rjmp	.-134    	; 0x188c <u8CheckReading+0x32>
		   
		}
		
		
	}
	return u8ReturnKeyLoc ;
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1914:	27 96       	adiw	r28, 0x07	; 7
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <LCD_voidInit>:
#include "LCD_cfg.h"
#include "LCD_priv.h"


void LCD_voidInit(void)
{
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	ce 58       	subi	r28, 0x8E	; 142
    1934:	d0 40       	sbci	r29, 0x00	; 0
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc = 0 ;
    1940:	fe 01       	movw	r30, r28
    1942:	e2 57       	subi	r30, 0x72	; 114
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	10 82       	st	Z, r1
	uint8 u8CmdLoc  = 0 ;
    1948:	fe 01       	movw	r30, r28
    194a:	e3 57       	subi	r30, 0x73	; 115
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	10 82       	st	Z, r1
	for ( u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc ++)
    1950:	fe 01       	movw	r30, r28
    1952:	e2 57       	subi	r30, 0x72	; 114
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	10 82       	st	Z, r1
    1958:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <LCD_voidInit+0x1072>
	{
		if (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    195c:	fe 01       	movw	r30, r28
    195e:	e2 57       	subi	r30, 0x72	; 114
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	c9 01       	movw	r24, r18
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	82 0f       	add	r24, r18
    1970:	93 1f       	adc	r25, r19
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	fc 01       	movw	r30, r24
    197c:	ee 50       	subi	r30, 0x0E	; 14
    197e:	fe 4f       	sbci	r31, 0xFE	; 254
    1980:	80 81       	ld	r24, Z
    1982:	81 70       	andi	r24, 0x01	; 1
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	09 f0       	breq	.+2      	; 0x198a <LCD_voidInit+0x64>
    1988:	75 c4       	rjmp	.+2282   	; 0x2274 <LCD_voidInit+0x94e>
    198a:	fe 01       	movw	r30, r28
    198c:	e7 57       	subi	r30, 0x77	; 119
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 ef       	ldi	r26, 0xF0	; 240
    1996:	b1 e4       	ldi	r27, 0x41	; 65
    1998:	80 83       	st	Z, r24
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	a2 83       	std	Z+2, r26	; 0x02
    199e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	8e 01       	movw	r16, r28
    19a2:	0b 57       	subi	r16, 0x7B	; 123
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	fe 01       	movw	r30, r28
    19a8:	e7 57       	subi	r30, 0x77	; 119
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a ef       	ldi	r20, 0xFA	; 250
    19ba:	54 e4       	ldi	r21, 0x44	; 68
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	f8 01       	movw	r30, r16
    19c6:	80 83       	st	Z, r24
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	a2 83       	std	Z+2, r26	; 0x02
    19cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ce:	fe 01       	movw	r30, r28
    19d0:	eb 57       	subi	r30, 0x7B	; 123
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e8       	ldi	r20, 0x80	; 128
    19e2:	5f e3       	ldi	r21, 0x3F	; 63
    19e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e8:	88 23       	and	r24, r24
    19ea:	44 f4       	brge	.+16     	; 0x19fc <LCD_voidInit+0xd6>
		__ticks = 1;
    19ec:	fe 01       	movw	r30, r28
    19ee:	ed 57       	subi	r30, 0x7D	; 125
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	64 c0       	rjmp	.+200    	; 0x1ac4 <LCD_voidInit+0x19e>
	else if (__tmp > 65535)
    19fc:	fe 01       	movw	r30, r28
    19fe:	eb 57       	subi	r30, 0x7B	; 123
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	60 81       	ld	r22, Z
    1a04:	71 81       	ldd	r23, Z+1	; 0x01
    1a06:	82 81       	ldd	r24, Z+2	; 0x02
    1a08:	93 81       	ldd	r25, Z+3	; 0x03
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	0c f0       	brlt	.+2      	; 0x1a1c <LCD_voidInit+0xf6>
    1a1a:	43 c0       	rjmp	.+134    	; 0x1aa2 <LCD_voidInit+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e7 57       	subi	r30, 0x77	; 119
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e2       	ldi	r20, 0x20	; 32
    1a30:	51 e4       	ldi	r21, 0x41	; 65
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	8e 01       	movw	r16, r28
    1a3c:	0d 57       	subi	r16, 0x7D	; 125
    1a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
    1a52:	1f c0       	rjmp	.+62     	; 0x1a92 <LCD_voidInit+0x16c>
    1a54:	fe 01       	movw	r30, r28
    1a56:	ef 57       	subi	r30, 0x7F	; 127
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	88 ec       	ldi	r24, 0xC8	; 200
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
    1a62:	fe 01       	movw	r30, r28
    1a64:	ef 57       	subi	r30, 0x7F	; 127
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <LCD_voidInit+0x146>
    1a70:	fe 01       	movw	r30, r28
    1a72:	ef 57       	subi	r30, 0x7F	; 127
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	de 01       	movw	r26, r28
    1a7c:	ad 57       	subi	r26, 0x7D	; 125
    1a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a80:	fe 01       	movw	r30, r28
    1a82:	ed 57       	subi	r30, 0x7D	; 125
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	91 81       	ldd	r25, Z+1	; 0x01
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	11 96       	adiw	r26, 0x01	; 1
    1a8e:	9c 93       	st	X, r25
    1a90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a92:	fe 01       	movw	r30, r28
    1a94:	ed 57       	subi	r30, 0x7D	; 125
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	d1 f6       	brne	.-76     	; 0x1a54 <LCD_voidInit+0x12e>
    1aa0:	27 c0       	rjmp	.+78     	; 0x1af0 <LCD_voidInit+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa2:	8e 01       	movw	r16, r28
    1aa4:	0d 57       	subi	r16, 0x7D	; 125
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	eb 57       	subi	r30, 0x7B	; 123
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	f8 01       	movw	r30, r16
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	de 01       	movw	r26, r28
    1ac6:	a1 58       	subi	r26, 0x81	; 129
    1ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aca:	fe 01       	movw	r30, r28
    1acc:	ed 57       	subi	r30, 0x7D	; 125
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 81       	ld	r24, Z
    1ad2:	91 81       	ldd	r25, Z+1	; 0x01
    1ad4:	8d 93       	st	X+, r24
    1ad6:	9c 93       	st	X, r25
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e1 58       	subi	r30, 0x81	; 129
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <LCD_voidInit+0x1bc>
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e1 58       	subi	r30, 0x81	; 129
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
		{
			/* Step 1 */
			_delay_ms(30);
			/* Step 2 */
			u8CmdLoc = (0b00110000)  |
    1af0:	fe 01       	movw	r30, r28
    1af2:	e2 57       	subi	r30, 0x72	; 114
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	c9 01       	movw	r24, r18
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	82 0f       	add	r24, r18
    1b04:	93 1f       	adc	r25, r19
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	fc 01       	movw	r30, r24
    1b10:	ee 50       	subi	r30, 0x0E	; 14
    1b12:	fe 4f       	sbci	r31, 0xFE	; 254
    1b14:	80 81       	ld	r24, Z
    1b16:	86 95       	lsr	r24
    1b18:	81 70       	andi	r24, 0x01	; 1
    1b1a:	88 2f       	mov	r24, r24
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	40 63       	ori	r20, 0x30	; 48
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e2 57       	subi	r30, 0x72	; 114
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 81       	ld	r24, Z
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	c9 01       	movw	r24, r18
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	82 0f       	add	r24, r18
    1b42:	93 1f       	adc	r25, r19
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	ee 50       	subi	r30, 0x0E	; 14
    1b50:	fe 4f       	sbci	r31, 0xFE	; 254
    1b52:	80 81       	ld	r24, Z
    1b54:	86 95       	lsr	r24
    1b56:	86 95       	lsr	r24
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	84 2b       	or	r24, r20
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e3 57       	subi	r30, 0x73	; 115
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8UsedLines  << 3 )|
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CharFont   << 2 );
			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1b70:	fe 01       	movw	r30, r28
    1b72:	e2 57       	subi	r30, 0x72	; 114
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	de 01       	movw	r26, r28
    1b78:	a3 57       	subi	r26, 0x73	; 115
    1b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b7c:	80 81       	ld	r24, Z
    1b7e:	6c 91       	ld	r22, X
    1b80:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    1b84:	fe 01       	movw	r30, r28
    1b86:	e5 58       	subi	r30, 0x85	; 133
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a0 e8       	ldi	r26, 0x80	; 128
    1b90:	bf e3       	ldi	r27, 0x3F	; 63
    1b92:	80 83       	st	Z, r24
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	a2 83       	std	Z+2, r26	; 0x02
    1b98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	8e 01       	movw	r16, r28
    1b9c:	09 58       	subi	r16, 0x89	; 137
    1b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e5 58       	subi	r30, 0x85	; 133
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	60 81       	ld	r22, Z
    1ba8:	71 81       	ldd	r23, Z+1	; 0x01
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a ef       	ldi	r20, 0xFA	; 250
    1bb4:	54 e4       	ldi	r21, 0x44	; 68
    1bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	80 83       	st	Z, r24
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	a2 83       	std	Z+2, r26	; 0x02
    1bc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e9 58       	subi	r30, 0x89	; 137
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	44 f4       	brge	.+16     	; 0x1bf6 <LCD_voidInit+0x2d0>
		__ticks = 1;
    1be6:	fe 01       	movw	r30, r28
    1be8:	eb 58       	subi	r30, 0x8B	; 139
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
    1bf4:	64 c0       	rjmp	.+200    	; 0x1cbe <LCD_voidInit+0x398>
	else if (__tmp > 65535)
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e9 58       	subi	r30, 0x89	; 137
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	3f ef       	ldi	r19, 0xFF	; 255
    1c08:	4f e7       	ldi	r20, 0x7F	; 127
    1c0a:	57 e4       	ldi	r21, 0x47	; 71
    1c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c10:	18 16       	cp	r1, r24
    1c12:	0c f0       	brlt	.+2      	; 0x1c16 <LCD_voidInit+0x2f0>
    1c14:	43 c0       	rjmp	.+134    	; 0x1c9c <LCD_voidInit+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	fe 01       	movw	r30, r28
    1c18:	e5 58       	subi	r30, 0x85	; 133
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	60 81       	ld	r22, Z
    1c1e:	71 81       	ldd	r23, Z+1	; 0x01
    1c20:	82 81       	ldd	r24, Z+2	; 0x02
    1c22:	93 81       	ldd	r25, Z+3	; 0x03
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e2       	ldi	r20, 0x20	; 32
    1c2a:	51 e4       	ldi	r21, 0x41	; 65
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8e 01       	movw	r16, r28
    1c36:	0b 58       	subi	r16, 0x8B	; 139
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	f8 01       	movw	r30, r16
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
    1c4c:	1f c0       	rjmp	.+62     	; 0x1c8c <LCD_voidInit+0x366>
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ed 58       	subi	r30, 0x8D	; 141
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	88 ec       	ldi	r24, 0xC8	; 200
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	ed 58       	subi	r30, 0x8D	; 141
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	80 81       	ld	r24, Z
    1c64:	91 81       	ldd	r25, Z+1	; 0x01
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_voidInit+0x340>
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ed 58       	subi	r30, 0x8D	; 141
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c74:	de 01       	movw	r26, r28
    1c76:	ab 58       	subi	r26, 0x8B	; 139
    1c78:	bf 4f       	sbci	r27, 0xFF	; 255
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	eb 58       	subi	r30, 0x8B	; 139
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	11 96       	adiw	r26, 0x01	; 1
    1c88:	9c 93       	st	X, r25
    1c8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	eb 58       	subi	r30, 0x8B	; 139
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 81       	ld	r24, Z
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	d1 f6       	brne	.-76     	; 0x1c4e <LCD_voidInit+0x328>
    1c9a:	27 c0       	rjmp	.+78     	; 0x1cea <LCD_voidInit+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	8e 01       	movw	r16, r28
    1c9e:	0b 58       	subi	r16, 0x8B	; 139
    1ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e9 58       	subi	r30, 0x89	; 137
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	60 81       	ld	r22, Z
    1caa:	71 81       	ldd	r23, Z+1	; 0x01
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	93 81       	ldd	r25, Z+3	; 0x03
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	f8 01       	movw	r30, r16
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
    1cbe:	de 01       	movw	r26, r28
    1cc0:	af 58       	subi	r26, 0x8F	; 143
    1cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	eb 58       	subi	r30, 0x8B	; 139
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	8d 93       	st	X+, r24
    1cd0:	9c 93       	st	X, r25
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	ef 58       	subi	r30, 0x8F	; 143
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <LCD_voidInit+0x3b6>
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ef 58       	subi	r30, 0x8F	; 143
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	80 83       	st	Z, r24
			/* Step 3 */
			_delay_ms(1);
			/* Step 4 */
			u8CmdLoc =   (0b00001000) |
    1cea:	fe 01       	movw	r30, r28
    1cec:	e2 57       	subi	r30, 0x72	; 114
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	c9 01       	movw	r24, r18
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	82 0f       	add	r24, r18
    1cfe:	93 1f       	adc	r25, r19
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	fc 01       	movw	r30, r24
    1d0a:	ee 50       	subi	r30, 0x0E	; 14
    1d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d0e:	80 81       	ld	r24, Z
    1d10:	86 95       	lsr	r24
    1d12:	86 95       	lsr	r24
    1d14:	86 95       	lsr	r24
    1d16:	81 70       	andi	r24, 0x01	; 1
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	48 2f       	mov	r20, r24
    1d26:	48 60       	ori	r20, 0x08	; 8
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e2 57       	subi	r30, 0x72	; 114
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	c9 01       	movw	r24, r18
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	82 0f       	add	r24, r18
    1d3c:	93 1f       	adc	r25, r19
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	fc 01       	movw	r30, r24
    1d48:	ee 50       	subi	r30, 0x0E	; 14
    1d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4c:	80 81       	ld	r24, Z
    1d4e:	82 95       	swap	r24
    1d50:	8f 70       	andi	r24, 0x0F	; 15
    1d52:	81 70       	andi	r24, 0x01	; 1
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	48 2b       	or	r20, r24
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e2 57       	subi	r30, 0x72	; 114
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	80 81       	ld	r24, Z
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	c9 01       	movw	r24, r18
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	82 0f       	add	r24, r18
    1d72:	93 1f       	adc	r25, r19
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	ee 50       	subi	r30, 0x0E	; 14
    1d80:	fe 4f       	sbci	r31, 0xFE	; 254
    1d82:	80 81       	ld	r24, Z
    1d84:	82 95       	swap	r24
    1d86:	86 95       	lsr	r24
    1d88:	87 70       	andi	r24, 0x07	; 7
    1d8a:	81 70       	andi	r24, 0x01	; 1
    1d8c:	84 2b       	or	r24, r20
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e3 57       	subi	r30, 0x73	; 115
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 83       	st	Z, r24
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8DisplayState     << 2 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorState      << 1 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorBlinkState << 0 );			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1d96:	fe 01       	movw	r30, r28
    1d98:	e2 57       	subi	r30, 0x72	; 114
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	de 01       	movw	r26, r28
    1d9e:	a3 57       	subi	r26, 0x73	; 115
    1da0:	bf 4f       	sbci	r27, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	6c 91       	ld	r22, X
    1da6:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    1daa:	fe 01       	movw	r30, r28
    1dac:	e3 59       	subi	r30, 0x93	; 147
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a0 e8       	ldi	r26, 0x80	; 128
    1db6:	bf e3       	ldi	r27, 0x3F	; 63
    1db8:	80 83       	st	Z, r24
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	a2 83       	std	Z+2, r26	; 0x02
    1dbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	8e 01       	movw	r16, r28
    1dc2:	07 59       	subi	r16, 0x97	; 151
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e3 59       	subi	r30, 0x93	; 147
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	60 81       	ld	r22, Z
    1dce:	71 81       	ldd	r23, Z+1	; 0x01
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4a ef       	ldi	r20, 0xFA	; 250
    1dda:	54 e4       	ldi	r21, 0x44	; 68
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	f8 01       	movw	r30, r16
    1de6:	80 83       	st	Z, r24
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	a2 83       	std	Z+2, r26	; 0x02
    1dec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dee:	fe 01       	movw	r30, r28
    1df0:	e7 59       	subi	r30, 0x97	; 151
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	60 81       	ld	r22, Z
    1df6:	71 81       	ldd	r23, Z+1	; 0x01
    1df8:	82 81       	ldd	r24, Z+2	; 0x02
    1dfa:	93 81       	ldd	r25, Z+3	; 0x03
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e08:	88 23       	and	r24, r24
    1e0a:	44 f4       	brge	.+16     	; 0x1e1c <LCD_voidInit+0x4f6>
		__ticks = 1;
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e9 59       	subi	r30, 0x99	; 153
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	80 83       	st	Z, r24
    1e1a:	64 c0       	rjmp	.+200    	; 0x1ee4 <LCD_voidInit+0x5be>
	else if (__tmp > 65535)
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e7 59       	subi	r30, 0x97	; 151
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	93 81       	ldd	r25, Z+3	; 0x03
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	3f ef       	ldi	r19, 0xFF	; 255
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	0c f0       	brlt	.+2      	; 0x1e3c <LCD_voidInit+0x516>
    1e3a:	43 c0       	rjmp	.+134    	; 0x1ec2 <LCD_voidInit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e3 59       	subi	r30, 0x93	; 147
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	09 59       	subi	r16, 0x99	; 153
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	f8 01       	movw	r30, r16
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	80 83       	st	Z, r24
    1e72:	1f c0       	rjmp	.+62     	; 0x1eb2 <LCD_voidInit+0x58c>
    1e74:	fe 01       	movw	r30, r28
    1e76:	eb 59       	subi	r30, 0x9B	; 155
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	88 ec       	ldi	r24, 0xC8	; 200
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	80 83       	st	Z, r24
    1e82:	fe 01       	movw	r30, r28
    1e84:	eb 59       	subi	r30, 0x9B	; 155
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_voidInit+0x566>
    1e90:	fe 01       	movw	r30, r28
    1e92:	eb 59       	subi	r30, 0x9B	; 155
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9a:	de 01       	movw	r26, r28
    1e9c:	a9 59       	subi	r26, 0x99	; 153
    1e9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e9 59       	subi	r30, 0x99	; 153
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	91 81       	ldd	r25, Z+1	; 0x01
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	11 96       	adiw	r26, 0x01	; 1
    1eae:	9c 93       	st	X, r25
    1eb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e9 59       	subi	r30, 0x99	; 153
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 81       	ld	r24, Z
    1eba:	91 81       	ldd	r25, Z+1	; 0x01
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	d1 f6       	brne	.-76     	; 0x1e74 <LCD_voidInit+0x54e>
    1ec0:	27 c0       	rjmp	.+78     	; 0x1f10 <LCD_voidInit+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec2:	8e 01       	movw	r16, r28
    1ec4:	09 59       	subi	r16, 0x99	; 153
    1ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e7 59       	subi	r30, 0x97	; 151
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	60 81       	ld	r22, Z
    1ed0:	71 81       	ldd	r23, Z+1	; 0x01
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	f8 01       	movw	r30, r16
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	80 83       	st	Z, r24
    1ee4:	de 01       	movw	r26, r28
    1ee6:	ad 59       	subi	r26, 0x9D	; 157
    1ee8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eea:	fe 01       	movw	r30, r28
    1eec:	e9 59       	subi	r30, 0x99	; 153
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	8d 93       	st	X+, r24
    1ef6:	9c 93       	st	X, r25
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ed 59       	subi	r30, 0x9D	; 157
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_voidInit+0x5dc>
    1f06:	fe 01       	movw	r30, r28
    1f08:	ed 59       	subi	r30, 0x9D	; 157
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	80 83       	st	Z, r24
			/* Step 5 */
			_delay_ms(1);
			/* Step 6 */
			voidWriteCmd(u8CntrLoc , 0x01);
    1f10:	fe 01       	movw	r30, r28
    1f12:	e2 57       	subi	r30, 0x72	; 114
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e1 5a       	subi	r30, 0xA1	; 161
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 e4       	ldi	r26, 0x40	; 64
    1f2a:	b0 e4       	ldi	r27, 0x40	; 64
    1f2c:	80 83       	st	Z, r24
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	a2 83       	std	Z+2, r26	; 0x02
    1f32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f34:	8e 01       	movw	r16, r28
    1f36:	05 5a       	subi	r16, 0xA5	; 165
    1f38:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e1 5a       	subi	r30, 0xA1	; 161
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a ef       	ldi	r20, 0xFA	; 250
    1f4e:	54 e4       	ldi	r21, 0x44	; 68
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	f8 01       	movw	r30, r16
    1f5a:	80 83       	st	Z, r24
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	a2 83       	std	Z+2, r26	; 0x02
    1f60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f62:	fe 01       	movw	r30, r28
    1f64:	e5 5a       	subi	r30, 0xA5	; 165
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	44 f4       	brge	.+16     	; 0x1f90 <LCD_voidInit+0x66a>
		__ticks = 1;
    1f80:	fe 01       	movw	r30, r28
    1f82:	e7 5a       	subi	r30, 0xA7	; 167
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
    1f8e:	64 c0       	rjmp	.+200    	; 0x2058 <LCD_voidInit+0x732>
	else if (__tmp > 65535)
    1f90:	fe 01       	movw	r30, r28
    1f92:	e5 5a       	subi	r30, 0xA5	; 165
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	60 81       	ld	r22, Z
    1f98:	71 81       	ldd	r23, Z+1	; 0x01
    1f9a:	82 81       	ldd	r24, Z+2	; 0x02
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	0c f0       	brlt	.+2      	; 0x1fb0 <LCD_voidInit+0x68a>
    1fae:	43 c0       	rjmp	.+134    	; 0x2036 <LCD_voidInit+0x710>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e1 5a       	subi	r30, 0xA1	; 161
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	8e 01       	movw	r16, r28
    1fd0:	07 5a       	subi	r16, 0xA7	; 167
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	80 83       	st	Z, r24
    1fe6:	1f c0       	rjmp	.+62     	; 0x2026 <LCD_voidInit+0x700>
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e9 5a       	subi	r30, 0xA9	; 169
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	88 ec       	ldi	r24, 0xC8	; 200
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e9 5a       	subi	r30, 0xA9	; 169
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_voidInit+0x6da>
    2004:	fe 01       	movw	r30, r28
    2006:	e9 5a       	subi	r30, 0xA9	; 169
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	de 01       	movw	r26, r28
    2010:	a7 5a       	subi	r26, 0xA7	; 167
    2012:	bf 4f       	sbci	r27, 0xFF	; 255
    2014:	fe 01       	movw	r30, r28
    2016:	e7 5a       	subi	r30, 0xA7	; 167
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	11 96       	adiw	r26, 0x01	; 1
    2022:	9c 93       	st	X, r25
    2024:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	fe 01       	movw	r30, r28
    2028:	e7 5a       	subi	r30, 0xA7	; 167
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	d1 f6       	brne	.-76     	; 0x1fe8 <LCD_voidInit+0x6c2>
    2034:	27 c0       	rjmp	.+78     	; 0x2084 <LCD_voidInit+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	8e 01       	movw	r16, r28
    2038:	07 5a       	subi	r16, 0xA7	; 167
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	fe 01       	movw	r30, r28
    203e:	e5 5a       	subi	r30, 0xA5	; 165
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	f8 01       	movw	r30, r16
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	80 83       	st	Z, r24
    2058:	de 01       	movw	r26, r28
    205a:	ab 5a       	subi	r26, 0xAB	; 171
    205c:	bf 4f       	sbci	r27, 0xFF	; 255
    205e:	fe 01       	movw	r30, r28
    2060:	e7 5a       	subi	r30, 0xA7	; 167
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	8d 93       	st	X+, r24
    206a:	9c 93       	st	X, r25
    206c:	fe 01       	movw	r30, r28
    206e:	eb 5a       	subi	r30, 0xAB	; 171
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	91 81       	ldd	r25, Z+1	; 0x01
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <LCD_voidInit+0x750>
    207a:	fe 01       	movw	r30, r28
    207c:	eb 5a       	subi	r30, 0xAB	; 171
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	80 83       	st	Z, r24
			/* Step 7 */
			_delay_ms(3);
			/* Step 8 */
			u8CmdLoc =   (0b00000100) |
    2084:	fe 01       	movw	r30, r28
    2086:	e2 57       	subi	r30, 0x72	; 114
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	c9 01       	movw	r24, r18
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	82 0f       	add	r24, r18
    2098:	93 1f       	adc	r25, r19
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	fc 01       	movw	r30, r24
    20a4:	ee 50       	subi	r30, 0x0E	; 14
    20a6:	fe 4f       	sbci	r31, 0xFE	; 254
    20a8:	80 81       	ld	r24, Z
    20aa:	82 95       	swap	r24
    20ac:	86 95       	lsr	r24
    20ae:	86 95       	lsr	r24
    20b0:	83 70       	andi	r24, 0x03	; 3
    20b2:	81 70       	andi	r24, 0x01	; 1
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	48 2f       	mov	r20, r24
    20be:	44 60       	ori	r20, 0x04	; 4
    20c0:	fe 01       	movw	r30, r28
    20c2:	e2 57       	subi	r30, 0x72	; 114
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 81       	ld	r24, Z
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	c9 01       	movw	r24, r18
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	82 0f       	add	r24, r18
    20d4:	93 1f       	adc	r25, r19
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	fc 01       	movw	r30, r24
    20e0:	ee 50       	subi	r30, 0x0E	; 14
    20e2:	fe 4f       	sbci	r31, 0xFE	; 254
    20e4:	80 81       	ld	r24, Z
    20e6:	88 1f       	adc	r24, r24
    20e8:	88 27       	eor	r24, r24
    20ea:	88 1f       	adc	r24, r24
    20ec:	84 2b       	or	r24, r20
    20ee:	fe 01       	movw	r30, r28
    20f0:	e3 57       	subi	r30, 0x73	; 115
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8IncrementMode  << 1 )|
            (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8ShiftMode      << 0 );
                        
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    20f6:	fe 01       	movw	r30, r28
    20f8:	e2 57       	subi	r30, 0x72	; 114
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	de 01       	movw	r26, r28
    20fe:	a3 57       	subi	r26, 0x73	; 115
    2100:	bf 4f       	sbci	r27, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	6c 91       	ld	r22, X
    2106:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    210a:	fe 01       	movw	r30, r28
    210c:	ef 5a       	subi	r30, 0xAF	; 175
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a0 e4       	ldi	r26, 0x40	; 64
    2116:	b0 e4       	ldi	r27, 0x40	; 64
    2118:	80 83       	st	Z, r24
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	a2 83       	std	Z+2, r26	; 0x02
    211e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	8e 01       	movw	r16, r28
    2122:	03 5b       	subi	r16, 0xB3	; 179
    2124:	1f 4f       	sbci	r17, 0xFF	; 255
    2126:	fe 01       	movw	r30, r28
    2128:	ef 5a       	subi	r30, 0xAF	; 175
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	4a ef       	ldi	r20, 0xFA	; 250
    213a:	54 e4       	ldi	r21, 0x44	; 68
    213c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	f8 01       	movw	r30, r16
    2146:	80 83       	st	Z, r24
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	a2 83       	std	Z+2, r26	; 0x02
    214c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    214e:	fe 01       	movw	r30, r28
    2150:	e3 5b       	subi	r30, 0xB3	; 179
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	60 81       	ld	r22, Z
    2156:	71 81       	ldd	r23, Z+1	; 0x01
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	93 81       	ldd	r25, Z+3	; 0x03
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e8       	ldi	r20, 0x80	; 128
    2162:	5f e3       	ldi	r21, 0x3F	; 63
    2164:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2168:	88 23       	and	r24, r24
    216a:	44 f4       	brge	.+16     	; 0x217c <LCD_voidInit+0x856>
		__ticks = 1;
    216c:	fe 01       	movw	r30, r28
    216e:	e5 5b       	subi	r30, 0xB5	; 181
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
    217a:	64 c0       	rjmp	.+200    	; 0x2244 <LCD_voidInit+0x91e>
	else if (__tmp > 65535)
    217c:	fe 01       	movw	r30, r28
    217e:	e3 5b       	subi	r30, 0xB3	; 179
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	3f ef       	ldi	r19, 0xFF	; 255
    218e:	4f e7       	ldi	r20, 0x7F	; 127
    2190:	57 e4       	ldi	r21, 0x47	; 71
    2192:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2196:	18 16       	cp	r1, r24
    2198:	0c f0       	brlt	.+2      	; 0x219c <LCD_voidInit+0x876>
    219a:	43 c0       	rjmp	.+134    	; 0x2222 <LCD_voidInit+0x8fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	fe 01       	movw	r30, r28
    219e:	ef 5a       	subi	r30, 0xAF	; 175
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	60 81       	ld	r22, Z
    21a4:	71 81       	ldd	r23, Z+1	; 0x01
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	8e 01       	movw	r16, r28
    21bc:	05 5b       	subi	r16, 0xB5	; 181
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	f8 01       	movw	r30, r16
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
    21d2:	1f c0       	rjmp	.+62     	; 0x2212 <LCD_voidInit+0x8ec>
    21d4:	fe 01       	movw	r30, r28
    21d6:	e7 5b       	subi	r30, 0xB7	; 183
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	88 ec       	ldi	r24, 0xC8	; 200
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
    21e2:	fe 01       	movw	r30, r28
    21e4:	e7 5b       	subi	r30, 0xB7	; 183
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	80 81       	ld	r24, Z
    21ea:	91 81       	ldd	r25, Z+1	; 0x01
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_voidInit+0x8c6>
    21f0:	fe 01       	movw	r30, r28
    21f2:	e7 5b       	subi	r30, 0xB7	; 183
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fa:	de 01       	movw	r26, r28
    21fc:	a5 5b       	subi	r26, 0xB5	; 181
    21fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	e5 5b       	subi	r30, 0xB5	; 181
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	11 96       	adiw	r26, 0x01	; 1
    220e:	9c 93       	st	X, r25
    2210:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2212:	fe 01       	movw	r30, r28
    2214:	e5 5b       	subi	r30, 0xB5	; 181
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	d1 f6       	brne	.-76     	; 0x21d4 <LCD_voidInit+0x8ae>
    2220:	b2 c3       	rjmp	.+1892   	; 0x2986 <LCD_voidInit+0x1060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	8e 01       	movw	r16, r28
    2224:	05 5b       	subi	r16, 0xB5	; 181
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	fe 01       	movw	r30, r28
    222a:	e3 5b       	subi	r30, 0xB3	; 179
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	f8 01       	movw	r30, r16
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
    2244:	de 01       	movw	r26, r28
    2246:	a9 5b       	subi	r26, 0xB9	; 185
    2248:	bf 4f       	sbci	r27, 0xFF	; 255
    224a:	fe 01       	movw	r30, r28
    224c:	e5 5b       	subi	r30, 0xB5	; 181
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	11 96       	adiw	r26, 0x01	; 1
    2256:	9c 93       	st	X, r25
    2258:	8e 93       	st	-X, r24
    225a:	fe 01       	movw	r30, r28
    225c:	e9 5b       	subi	r30, 0xB9	; 185
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_voidInit+0x93e>
    2268:	fe 01       	movw	r30, r28
    226a:	e9 5b       	subi	r30, 0xB9	; 185
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	89 c3       	rjmp	.+1810   	; 0x2986 <LCD_voidInit+0x1060>
    2274:	fe 01       	movw	r30, r28
    2276:	ed 5b       	subi	r30, 0xBD	; 189
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 ef       	ldi	r26, 0xF0	; 240
    2280:	b1 e4       	ldi	r27, 0x41	; 65
    2282:	80 83       	st	Z, r24
    2284:	91 83       	std	Z+1, r25	; 0x01
    2286:	a2 83       	std	Z+2, r26	; 0x02
    2288:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228a:	8e 01       	movw	r16, r28
    228c:	01 5c       	subi	r16, 0xC1	; 193
    228e:	1f 4f       	sbci	r17, 0xFF	; 255
    2290:	fe 01       	movw	r30, r28
    2292:	ed 5b       	subi	r30, 0xBD	; 189
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	60 81       	ld	r22, Z
    2298:	71 81       	ldd	r23, Z+1	; 0x01
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	4a ef       	ldi	r20, 0xFA	; 250
    22a4:	54 e4       	ldi	r21, 0x44	; 68
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	f8 01       	movw	r30, r16
    22b0:	80 83       	st	Z, r24
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	a2 83       	std	Z+2, r26	; 0x02
    22b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b8:	fe 01       	movw	r30, r28
    22ba:	ff 96       	adiw	r30, 0x3f	; 63
    22bc:	60 81       	ld	r22, Z
    22be:	71 81       	ldd	r23, Z+1	; 0x01
    22c0:	82 81       	ldd	r24, Z+2	; 0x02
    22c2:	93 81       	ldd	r25, Z+3	; 0x03
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_voidInit+0x9b8>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9e af       	std	Y+62, r25	; 0x3e
    22da:	8d af       	std	Y+61, r24	; 0x3d
    22dc:	46 c0       	rjmp	.+140    	; 0x236a <LCD_voidInit+0xa44>
	else if (__tmp > 65535)
    22de:	fe 01       	movw	r30, r28
    22e0:	ff 96       	adiw	r30, 0x3f	; 63
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	3f ef       	ldi	r19, 0xFF	; 255
    22ee:	4f e7       	ldi	r20, 0x7F	; 127
    22f0:	57 e4       	ldi	r21, 0x47	; 71
    22f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f6:	18 16       	cp	r1, r24
    22f8:	64 f5       	brge	.+88     	; 0x2352 <LCD_voidInit+0xa2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fa:	fe 01       	movw	r30, r28
    22fc:	ed 5b       	subi	r30, 0xBD	; 189
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	60 81       	ld	r22, Z
    2302:	71 81       	ldd	r23, Z+1	; 0x01
    2304:	82 81       	ldd	r24, Z+2	; 0x02
    2306:	93 81       	ldd	r25, Z+3	; 0x03
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e2       	ldi	r20, 0x20	; 32
    230e:	51 e4       	ldi	r21, 0x41	; 65
    2310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9e af       	std	Y+62, r25	; 0x3e
    2326:	8d af       	std	Y+61, r24	; 0x3d
    2328:	0f c0       	rjmp	.+30     	; 0x2348 <LCD_voidInit+0xa22>
    232a:	88 ec       	ldi	r24, 0xC8	; 200
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	9c af       	std	Y+60, r25	; 0x3c
    2330:	8b af       	std	Y+59, r24	; 0x3b
    2332:	8b ad       	ldd	r24, Y+59	; 0x3b
    2334:	9c ad       	ldd	r25, Y+60	; 0x3c
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <LCD_voidInit+0xa10>
    233a:	9c af       	std	Y+60, r25	; 0x3c
    233c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2340:	9e ad       	ldd	r25, Y+62	; 0x3e
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	9e af       	std	Y+62, r25	; 0x3e
    2346:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2348:	8d ad       	ldd	r24, Y+61	; 0x3d
    234a:	9e ad       	ldd	r25, Y+62	; 0x3e
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	69 f7       	brne	.-38     	; 0x232a <LCD_voidInit+0xa04>
    2350:	16 c0       	rjmp	.+44     	; 0x237e <LCD_voidInit+0xa58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2352:	fe 01       	movw	r30, r28
    2354:	ff 96       	adiw	r30, 0x3f	; 63
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9e af       	std	Y+62, r25	; 0x3e
    2368:	8d af       	std	Y+61, r24	; 0x3d
    236a:	8d ad       	ldd	r24, Y+61	; 0x3d
    236c:	9e ad       	ldd	r25, Y+62	; 0x3e
    236e:	9a af       	std	Y+58, r25	; 0x3a
    2370:	89 af       	std	Y+57, r24	; 0x39
    2372:	89 ad       	ldd	r24, Y+57	; 0x39
    2374:	9a ad       	ldd	r25, Y+58	; 0x3a
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_voidInit+0xa50>
    237a:	9a af       	std	Y+58, r25	; 0x3a
    237c:	89 af       	std	Y+57, r24	; 0x39
		else 
		{
			/* Step 1 */
			_delay_ms(30);
			/* Step 2 */
			voidWriteCmd(u8CntrLoc , 0b00100000);
    237e:	fe 01       	movw	r30, r28
    2380:	e2 57       	subi	r30, 0x72	; 114
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	60 e2       	ldi	r22, 0x20	; 32
    2388:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
			voidWriteCmd(u8CntrLoc , 0b00100000);
    238c:	fe 01       	movw	r30, r28
    238e:	e2 57       	subi	r30, 0x72	; 114
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	60 e2       	ldi	r22, 0x20	; 32
    2396:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
			u8CmdLoc = (0b00100000)  |
    239a:	fe 01       	movw	r30, r28
    239c:	e2 57       	subi	r30, 0x72	; 114
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	c9 01       	movw	r24, r18
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	82 0f       	add	r24, r18
    23ae:	93 1f       	adc	r25, r19
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	fc 01       	movw	r30, r24
    23ba:	ee 50       	subi	r30, 0x0E	; 14
    23bc:	fe 4f       	sbci	r31, 0xFE	; 254
    23be:	80 81       	ld	r24, Z
    23c0:	86 95       	lsr	r24
    23c2:	81 70       	andi	r24, 0x01	; 1
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	96 95       	lsr	r25
    23ca:	98 2f       	mov	r25, r24
    23cc:	88 27       	eor	r24, r24
    23ce:	97 95       	ror	r25
    23d0:	87 95       	ror	r24
    23d2:	48 2f       	mov	r20, r24
    23d4:	40 62       	ori	r20, 0x20	; 32
    23d6:	fe 01       	movw	r30, r28
    23d8:	e2 57       	subi	r30, 0x72	; 114
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	c9 01       	movw	r24, r18
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	82 0f       	add	r24, r18
    23ea:	93 1f       	adc	r25, r19
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	fc 01       	movw	r30, r24
    23f6:	ee 50       	subi	r30, 0x0E	; 14
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	80 81       	ld	r24, Z
    23fc:	86 95       	lsr	r24
    23fe:	86 95       	lsr	r24
    2400:	81 70       	andi	r24, 0x01	; 1
    2402:	88 2f       	mov	r24, r24
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	00 24       	eor	r0, r0
    2408:	96 95       	lsr	r25
    240a:	87 95       	ror	r24
    240c:	07 94       	ror	r0
    240e:	96 95       	lsr	r25
    2410:	87 95       	ror	r24
    2412:	07 94       	ror	r0
    2414:	98 2f       	mov	r25, r24
    2416:	80 2d       	mov	r24, r0
    2418:	84 2b       	or	r24, r20
    241a:	fe 01       	movw	r30, r28
    241c:	e3 57       	subi	r30, 0x73	; 115
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8UsedLines  << 7 )|
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CharFont   << 6 );
			
		    voidWriteCmd(u8CntrLoc , u8CmdLoc);
    2422:	fe 01       	movw	r30, r28
    2424:	e2 57       	subi	r30, 0x72	; 114
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	de 01       	movw	r26, r28
    242a:	a3 57       	subi	r26, 0x73	; 115
    242c:	bf 4f       	sbci	r27, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	6c 91       	ld	r22, X
    2432:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e8       	ldi	r26, 0x80	; 128
    243c:	bf e3       	ldi	r27, 0x3F	; 63
    243e:	8d ab       	std	Y+53, r24	; 0x35
    2440:	9e ab       	std	Y+54, r25	; 0x36
    2442:	af ab       	std	Y+55, r26	; 0x37
    2444:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6d a9       	ldd	r22, Y+53	; 0x35
    2448:	7e a9       	ldd	r23, Y+54	; 0x36
    244a:	8f a9       	ldd	r24, Y+55	; 0x37
    244c:	98 ad       	ldd	r25, Y+56	; 0x38
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	89 ab       	std	Y+49, r24	; 0x31
    2460:	9a ab       	std	Y+50, r25	; 0x32
    2462:	ab ab       	std	Y+51, r26	; 0x33
    2464:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2466:	69 a9       	ldd	r22, Y+49	; 0x31
    2468:	7a a9       	ldd	r23, Y+50	; 0x32
    246a:	8b a9       	ldd	r24, Y+51	; 0x33
    246c:	9c a9       	ldd	r25, Y+52	; 0x34
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <LCD_voidInit+0xb62>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	98 ab       	std	Y+48, r25	; 0x30
    2484:	8f a7       	std	Y+47, r24	; 0x2f
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <LCD_voidInit+0xbe0>
	else if (__tmp > 65535)
    2488:	69 a9       	ldd	r22, Y+49	; 0x31
    248a:	7a a9       	ldd	r23, Y+50	; 0x32
    248c:	8b a9       	ldd	r24, Y+51	; 0x33
    248e:	9c a9       	ldd	r25, Y+52	; 0x34
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <LCD_voidInit+0xbcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6d a9       	ldd	r22, Y+53	; 0x35
    24a2:	7e a9       	ldd	r23, Y+54	; 0x36
    24a4:	8f a9       	ldd	r24, Y+55	; 0x37
    24a6:	98 ad       	ldd	r25, Y+56	; 0x38
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	98 ab       	std	Y+48, r25	; 0x30
    24c6:	8f a7       	std	Y+47, r24	; 0x2f
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <LCD_voidInit+0xbc2>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9e a7       	std	Y+46, r25	; 0x2e
    24d0:	8d a7       	std	Y+45, r24	; 0x2d
    24d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    24d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_voidInit+0xbb0>
    24da:	9e a7       	std	Y+46, r25	; 0x2e
    24dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e0:	98 a9       	ldd	r25, Y+48	; 0x30
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	98 ab       	std	Y+48, r25	; 0x30
    24e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ea:	98 a9       	ldd	r25, Y+48	; 0x30
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <LCD_voidInit+0xba4>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <LCD_voidInit+0xbf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	69 a9       	ldd	r22, Y+49	; 0x31
    24f4:	7a a9       	ldd	r23, Y+50	; 0x32
    24f6:	8b a9       	ldd	r24, Y+51	; 0x33
    24f8:	9c a9       	ldd	r25, Y+52	; 0x34
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	98 ab       	std	Y+48, r25	; 0x30
    2504:	8f a7       	std	Y+47, r24	; 0x2f
    2506:	8f a5       	ldd	r24, Y+47	; 0x2f
    2508:	98 a9       	ldd	r25, Y+48	; 0x30
    250a:	9c a7       	std	Y+44, r25	; 0x2c
    250c:	8b a7       	std	Y+43, r24	; 0x2b
    250e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2510:	9c a5       	ldd	r25, Y+44	; 0x2c
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <LCD_voidInit+0xbec>
    2516:	9c a7       	std	Y+44, r25	; 0x2c
    2518:	8b a7       	std	Y+43, r24	; 0x2b
			/* Step 3 */
			_delay_ms(1);
			/* Step 4 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    251a:	fe 01       	movw	r30, r28
    251c:	e2 57       	subi	r30, 0x72	; 114
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
			
			u8CmdLoc =   (0b10000000) |
    2528:	fe 01       	movw	r30, r28
    252a:	e2 57       	subi	r30, 0x72	; 114
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	c9 01       	movw	r24, r18
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	82 0f       	add	r24, r18
    253c:	93 1f       	adc	r25, r19
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	fc 01       	movw	r30, r24
    2548:	ee 50       	subi	r30, 0x0E	; 14
    254a:	fe 4f       	sbci	r31, 0xFE	; 254
    254c:	80 81       	ld	r24, Z
    254e:	86 95       	lsr	r24
    2550:	86 95       	lsr	r24
    2552:	86 95       	lsr	r24
    2554:	81 70       	andi	r24, 0x01	; 1
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	00 24       	eor	r0, r0
    255c:	96 95       	lsr	r25
    255e:	87 95       	ror	r24
    2560:	07 94       	ror	r0
    2562:	96 95       	lsr	r25
    2564:	87 95       	ror	r24
    2566:	07 94       	ror	r0
    2568:	98 2f       	mov	r25, r24
    256a:	80 2d       	mov	r24, r0
    256c:	48 2f       	mov	r20, r24
    256e:	40 68       	ori	r20, 0x80	; 128
    2570:	fe 01       	movw	r30, r28
    2572:	e2 57       	subi	r30, 0x72	; 114
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	c9 01       	movw	r24, r18
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	82 0f       	add	r24, r18
    2584:	93 1f       	adc	r25, r19
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	fc 01       	movw	r30, r24
    2590:	ee 50       	subi	r30, 0x0E	; 14
    2592:	fe 4f       	sbci	r31, 0xFE	; 254
    2594:	80 81       	ld	r24, Z
    2596:	82 95       	swap	r24
    2598:	8f 70       	andi	r24, 0x0F	; 15
    259a:	81 70       	andi	r24, 0x01	; 1
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	82 95       	swap	r24
    25a6:	92 95       	swap	r25
    25a8:	90 7f       	andi	r25, 0xF0	; 240
    25aa:	98 27       	eor	r25, r24
    25ac:	80 7f       	andi	r24, 0xF0	; 240
    25ae:	98 27       	eor	r25, r24
    25b0:	48 2b       	or	r20, r24
    25b2:	fe 01       	movw	r30, r28
    25b4:	e2 57       	subi	r30, 0x72	; 114
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	c9 01       	movw	r24, r18
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	82 0f       	add	r24, r18
    25c6:	93 1f       	adc	r25, r19
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	fc 01       	movw	r30, r24
    25d2:	ee 50       	subi	r30, 0x0E	; 14
    25d4:	fe 4f       	sbci	r31, 0xFE	; 254
    25d6:	80 81       	ld	r24, Z
    25d8:	82 95       	swap	r24
    25da:	86 95       	lsr	r24
    25dc:	87 70       	andi	r24, 0x07	; 7
    25de:	81 70       	andi	r24, 0x01	; 1
    25e0:	88 2f       	mov	r24, r24
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	82 95       	swap	r24
    25e6:	92 95       	swap	r25
    25e8:	90 7f       	andi	r25, 0xF0	; 240
    25ea:	98 27       	eor	r25, r24
    25ec:	80 7f       	andi	r24, 0xF0	; 240
    25ee:	98 27       	eor	r25, r24
    25f0:	84 2b       	or	r24, r20
    25f2:	fe 01       	movw	r30, r28
    25f4:	e3 57       	subi	r30, 0x73	; 115
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 83       	st	Z, r24
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8DisplayState     << 6 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorState      << 5 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorBlinkState << 4 );			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    25fa:	fe 01       	movw	r30, r28
    25fc:	e2 57       	subi	r30, 0x72	; 114
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	de 01       	movw	r26, r28
    2602:	a3 57       	subi	r26, 0x73	; 115
    2604:	bf 4f       	sbci	r27, 0xFF	; 255
    2606:	80 81       	ld	r24, Z
    2608:	6c 91       	ld	r22, X
    260a:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a0 e8       	ldi	r26, 0x80	; 128
    2614:	bf e3       	ldi	r27, 0x3F	; 63
    2616:	8f a3       	std	Y+39, r24	; 0x27
    2618:	98 a7       	std	Y+40, r25	; 0x28
    261a:	a9 a7       	std	Y+41, r26	; 0x29
    261c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261e:	6f a1       	ldd	r22, Y+39	; 0x27
    2620:	78 a5       	ldd	r23, Y+40	; 0x28
    2622:	89 a5       	ldd	r24, Y+41	; 0x29
    2624:	9a a5       	ldd	r25, Y+42	; 0x2a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4a ef       	ldi	r20, 0xFA	; 250
    262c:	54 e4       	ldi	r21, 0x44	; 68
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	8b a3       	std	Y+35, r24	; 0x23
    2638:	9c a3       	std	Y+36, r25	; 0x24
    263a:	ad a3       	std	Y+37, r26	; 0x25
    263c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    263e:	6b a1       	ldd	r22, Y+35	; 0x23
    2640:	7c a1       	ldd	r23, Y+36	; 0x24
    2642:	8d a1       	ldd	r24, Y+37	; 0x25
    2644:	9e a1       	ldd	r25, Y+38	; 0x26
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e8       	ldi	r20, 0x80	; 128
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2652:	88 23       	and	r24, r24
    2654:	2c f4       	brge	.+10     	; 0x2660 <LCD_voidInit+0xd3a>
		__ticks = 1;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9a a3       	std	Y+34, r25	; 0x22
    265c:	89 a3       	std	Y+33, r24	; 0x21
    265e:	3f c0       	rjmp	.+126    	; 0x26de <LCD_voidInit+0xdb8>
	else if (__tmp > 65535)
    2660:	6b a1       	ldd	r22, Y+35	; 0x23
    2662:	7c a1       	ldd	r23, Y+36	; 0x24
    2664:	8d a1       	ldd	r24, Y+37	; 0x25
    2666:	9e a1       	ldd	r25, Y+38	; 0x26
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	3f ef       	ldi	r19, 0xFF	; 255
    266c:	4f e7       	ldi	r20, 0x7F	; 127
    266e:	57 e4       	ldi	r21, 0x47	; 71
    2670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2674:	18 16       	cp	r1, r24
    2676:	4c f5       	brge	.+82     	; 0x26ca <LCD_voidInit+0xda4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2678:	6f a1       	ldd	r22, Y+39	; 0x27
    267a:	78 a5       	ldd	r23, Y+40	; 0x28
    267c:	89 a5       	ldd	r24, Y+41	; 0x29
    267e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e2       	ldi	r20, 0x20	; 32
    2686:	51 e4       	ldi	r21, 0x41	; 65
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9a a3       	std	Y+34, r25	; 0x22
    269e:	89 a3       	std	Y+33, r24	; 0x21
    26a0:	0f c0       	rjmp	.+30     	; 0x26c0 <LCD_voidInit+0xd9a>
    26a2:	88 ec       	ldi	r24, 0xC8	; 200
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	98 a3       	std	Y+32, r25	; 0x20
    26a8:	8f 8f       	std	Y+31, r24	; 0x1f
    26aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26ac:	98 a1       	ldd	r25, Y+32	; 0x20
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <LCD_voidInit+0xd88>
    26b2:	98 a3       	std	Y+32, r25	; 0x20
    26b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b6:	89 a1       	ldd	r24, Y+33	; 0x21
    26b8:	9a a1       	ldd	r25, Y+34	; 0x22
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	9a a3       	std	Y+34, r25	; 0x22
    26be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c0:	89 a1       	ldd	r24, Y+33	; 0x21
    26c2:	9a a1       	ldd	r25, Y+34	; 0x22
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	69 f7       	brne	.-38     	; 0x26a2 <LCD_voidInit+0xd7c>
    26c8:	14 c0       	rjmp	.+40     	; 0x26f2 <LCD_voidInit+0xdcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ca:	6b a1       	ldd	r22, Y+35	; 0x23
    26cc:	7c a1       	ldd	r23, Y+36	; 0x24
    26ce:	8d a1       	ldd	r24, Y+37	; 0x25
    26d0:	9e a1       	ldd	r25, Y+38	; 0x26
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	9a a3       	std	Y+34, r25	; 0x22
    26dc:	89 a3       	std	Y+33, r24	; 0x21
    26de:	89 a1       	ldd	r24, Y+33	; 0x21
    26e0:	9a a1       	ldd	r25, Y+34	; 0x22
    26e2:	9e 8f       	std	Y+30, r25	; 0x1e
    26e4:	8d 8f       	std	Y+29, r24	; 0x1d
    26e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <LCD_voidInit+0xdc4>
    26ee:	9e 8f       	std	Y+30, r25	; 0x1e
    26f0:	8d 8f       	std	Y+29, r24	; 0x1d
			/* Step 5 */
			_delay_ms(1);
			/* Step 6 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    26f2:	fe 01       	movw	r30, r28
    26f4:	e2 57       	subi	r30, 0x72	; 114
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 81       	ld	r24, Z
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
			voidWriteCmd(u8CntrLoc , 0b00010000);
    2700:	fe 01       	movw	r30, r28
    2702:	e2 57       	subi	r30, 0x72	; 114
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	60 e1       	ldi	r22, 0x10	; 16
    270a:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e4       	ldi	r26, 0x40	; 64
    2714:	b0 e4       	ldi	r27, 0x40	; 64
    2716:	89 8f       	std	Y+25, r24	; 0x19
    2718:	9a 8f       	std	Y+26, r25	; 0x1a
    271a:	ab 8f       	std	Y+27, r26	; 0x1b
    271c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271e:	69 8d       	ldd	r22, Y+25	; 0x19
    2720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4a ef       	ldi	r20, 0xFA	; 250
    272c:	54 e4       	ldi	r21, 0x44	; 68
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	8d 8b       	std	Y+21, r24	; 0x15
    2738:	9e 8b       	std	Y+22, r25	; 0x16
    273a:	af 8b       	std	Y+23, r26	; 0x17
    273c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    273e:	6d 89       	ldd	r22, Y+21	; 0x15
    2740:	7e 89       	ldd	r23, Y+22	; 0x16
    2742:	8f 89       	ldd	r24, Y+23	; 0x17
    2744:	98 8d       	ldd	r25, Y+24	; 0x18
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e8       	ldi	r20, 0x80	; 128
    274c:	5f e3       	ldi	r21, 0x3F	; 63
    274e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2752:	88 23       	and	r24, r24
    2754:	2c f4       	brge	.+10     	; 0x2760 <LCD_voidInit+0xe3a>
		__ticks = 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9c 8b       	std	Y+20, r25	; 0x14
    275c:	8b 8b       	std	Y+19, r24	; 0x13
    275e:	3f c0       	rjmp	.+126    	; 0x27de <LCD_voidInit+0xeb8>
	else if (__tmp > 65535)
    2760:	6d 89       	ldd	r22, Y+21	; 0x15
    2762:	7e 89       	ldd	r23, Y+22	; 0x16
    2764:	8f 89       	ldd	r24, Y+23	; 0x17
    2766:	98 8d       	ldd	r25, Y+24	; 0x18
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	3f ef       	ldi	r19, 0xFF	; 255
    276c:	4f e7       	ldi	r20, 0x7F	; 127
    276e:	57 e4       	ldi	r21, 0x47	; 71
    2770:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2774:	18 16       	cp	r1, r24
    2776:	4c f5       	brge	.+82     	; 0x27ca <LCD_voidInit+0xea4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2778:	69 8d       	ldd	r22, Y+25	; 0x19
    277a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e2       	ldi	r20, 0x20	; 32
    2786:	51 e4       	ldi	r21, 0x41	; 65
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	bc 01       	movw	r22, r24
    2792:	cd 01       	movw	r24, r26
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9c 8b       	std	Y+20, r25	; 0x14
    279e:	8b 8b       	std	Y+19, r24	; 0x13
    27a0:	0f c0       	rjmp	.+30     	; 0x27c0 <LCD_voidInit+0xe9a>
    27a2:	88 ec       	ldi	r24, 0xC8	; 200
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	9a 8b       	std	Y+18, r25	; 0x12
    27a8:	89 8b       	std	Y+17, r24	; 0x11
    27aa:	89 89       	ldd	r24, Y+17	; 0x11
    27ac:	9a 89       	ldd	r25, Y+18	; 0x12
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <LCD_voidInit+0xe88>
    27b2:	9a 8b       	std	Y+18, r25	; 0x12
    27b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b6:	8b 89       	ldd	r24, Y+19	; 0x13
    27b8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	9c 8b       	std	Y+20, r25	; 0x14
    27be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c0:	8b 89       	ldd	r24, Y+19	; 0x13
    27c2:	9c 89       	ldd	r25, Y+20	; 0x14
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	69 f7       	brne	.-38     	; 0x27a2 <LCD_voidInit+0xe7c>
    27c8:	14 c0       	rjmp	.+40     	; 0x27f2 <LCD_voidInit+0xecc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ca:	6d 89       	ldd	r22, Y+21	; 0x15
    27cc:	7e 89       	ldd	r23, Y+22	; 0x16
    27ce:	8f 89       	ldd	r24, Y+23	; 0x17
    27d0:	98 8d       	ldd	r25, Y+24	; 0x18
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9c 8b       	std	Y+20, r25	; 0x14
    27dc:	8b 8b       	std	Y+19, r24	; 0x13
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	98 8b       	std	Y+16, r25	; 0x10
    27e4:	8f 87       	std	Y+15, r24	; 0x0f
    27e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e8:	98 89       	ldd	r25, Y+16	; 0x10
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_voidInit+0xec4>
    27ee:	98 8b       	std	Y+16, r25	; 0x10
    27f0:	8f 87       	std	Y+15, r24	; 0x0f
			/* Step 7 */
			_delay_ms(3);
			/* Step 8 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    27f2:	fe 01       	movw	r30, r28
    27f4:	e2 57       	subi	r30, 0x72	; 114
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
			u8CmdLoc =   (0b01000000) |
    2800:	fe 01       	movw	r30, r28
    2802:	e2 57       	subi	r30, 0x72	; 114
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	80 81       	ld	r24, Z
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	c9 01       	movw	r24, r18
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	82 0f       	add	r24, r18
    2814:	93 1f       	adc	r25, r19
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	fc 01       	movw	r30, r24
    2820:	ee 50       	subi	r30, 0x0E	; 14
    2822:	fe 4f       	sbci	r31, 0xFE	; 254
    2824:	80 81       	ld	r24, Z
    2826:	82 95       	swap	r24
    2828:	86 95       	lsr	r24
    282a:	86 95       	lsr	r24
    282c:	83 70       	andi	r24, 0x03	; 3
    282e:	81 70       	andi	r24, 0x01	; 1
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	82 95       	swap	r24
    283a:	92 95       	swap	r25
    283c:	90 7f       	andi	r25, 0xF0	; 240
    283e:	98 27       	eor	r25, r24
    2840:	80 7f       	andi	r24, 0xF0	; 240
    2842:	98 27       	eor	r25, r24
    2844:	48 2f       	mov	r20, r24
    2846:	40 64       	ori	r20, 0x40	; 64
    2848:	fe 01       	movw	r30, r28
    284a:	e2 57       	subi	r30, 0x72	; 114
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	c9 01       	movw	r24, r18
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	82 0f       	add	r24, r18
    285c:	93 1f       	adc	r25, r19
    285e:	88 0f       	add	r24, r24
    2860:	99 1f       	adc	r25, r25
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	fc 01       	movw	r30, r24
    2868:	ee 50       	subi	r30, 0x0E	; 14
    286a:	fe 4f       	sbci	r31, 0xFE	; 254
    286c:	80 81       	ld	r24, Z
    286e:	88 1f       	adc	r24, r24
    2870:	88 27       	eor	r24, r24
    2872:	88 1f       	adc	r24, r24
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	82 95       	swap	r24
    287a:	92 95       	swap	r25
    287c:	90 7f       	andi	r25, 0xF0	; 240
    287e:	98 27       	eor	r25, r24
    2880:	80 7f       	andi	r24, 0xF0	; 240
    2882:	98 27       	eor	r25, r24
    2884:	84 2b       	or	r24, r20
    2886:	fe 01       	movw	r30, r28
    2888:	e3 57       	subi	r30, 0x73	; 115
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8IncrementMode  << 5 )|
            (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8ShiftMode      << 4 );
                        
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    288e:	fe 01       	movw	r30, r28
    2890:	e2 57       	subi	r30, 0x72	; 114
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	de 01       	movw	r26, r28
    2896:	a3 57       	subi	r26, 0x73	; 115
    2898:	bf 4f       	sbci	r27, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	6c 91       	ld	r22, X
    289e:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	a0 e4       	ldi	r26, 0x40	; 64
    28a8:	b0 e4       	ldi	r27, 0x40	; 64
    28aa:	8b 87       	std	Y+11, r24	; 0x0b
    28ac:	9c 87       	std	Y+12, r25	; 0x0c
    28ae:	ad 87       	std	Y+13, r26	; 0x0d
    28b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	4a ef       	ldi	r20, 0xFA	; 250
    28c0:	54 e4       	ldi	r21, 0x44	; 68
    28c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8f 83       	std	Y+7, r24	; 0x07
    28cc:	98 87       	std	Y+8, r25	; 0x08
    28ce:	a9 87       	std	Y+9, r26	; 0x09
    28d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28d2:	6f 81       	ldd	r22, Y+7	; 0x07
    28d4:	78 85       	ldd	r23, Y+8	; 0x08
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	5f e3       	ldi	r21, 0x3F	; 63
    28e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e6:	88 23       	and	r24, r24
    28e8:	2c f4       	brge	.+10     	; 0x28f4 <LCD_voidInit+0xfce>
		__ticks = 1;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	3f c0       	rjmp	.+126    	; 0x2972 <LCD_voidInit+0x104c>
	else if (__tmp > 65535)
    28f4:	6f 81       	ldd	r22, Y+7	; 0x07
    28f6:	78 85       	ldd	r23, Y+8	; 0x08
    28f8:	89 85       	ldd	r24, Y+9	; 0x09
    28fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	3f ef       	ldi	r19, 0xFF	; 255
    2900:	4f e7       	ldi	r20, 0x7F	; 127
    2902:	57 e4       	ldi	r21, 0x47	; 71
    2904:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2908:	18 16       	cp	r1, r24
    290a:	4c f5       	brge	.+82     	; 0x295e <LCD_voidInit+0x1038>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290c:	6b 85       	ldd	r22, Y+11	; 0x0b
    290e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2910:	8d 85       	ldd	r24, Y+13	; 0x0d
    2912:	9e 85       	ldd	r25, Y+14	; 0x0e
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e2       	ldi	r20, 0x20	; 32
    291a:	51 e4       	ldi	r21, 0x41	; 65
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	bc 01       	movw	r22, r24
    2926:	cd 01       	movw	r24, r26
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9e 83       	std	Y+6, r25	; 0x06
    2932:	8d 83       	std	Y+5, r24	; 0x05
    2934:	0f c0       	rjmp	.+30     	; 0x2954 <LCD_voidInit+0x102e>
    2936:	88 ec       	ldi	r24, 0xC8	; 200
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	9c 83       	std	Y+4, r25	; 0x04
    293c:	8b 83       	std	Y+3, r24	; 0x03
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <LCD_voidInit+0x101c>
    2946:	9c 83       	std	Y+4, r25	; 0x04
    2948:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
    294c:	9e 81       	ldd	r25, Y+6	; 0x06
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	9e 83       	std	Y+6, r25	; 0x06
    2952:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2954:	8d 81       	ldd	r24, Y+5	; 0x05
    2956:	9e 81       	ldd	r25, Y+6	; 0x06
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	69 f7       	brne	.-38     	; 0x2936 <LCD_voidInit+0x1010>
    295c:	14 c0       	rjmp	.+40     	; 0x2986 <LCD_voidInit+0x1060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9e 83       	std	Y+6, r25	; 0x06
    2970:	8d 83       	std	Y+5, r24	; 0x05
    2972:	8d 81       	ldd	r24, Y+5	; 0x05
    2974:	9e 81       	ldd	r25, Y+6	; 0x06
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	9a 81       	ldd	r25, Y+2	; 0x02
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <LCD_voidInit+0x1058>
    2982:	9a 83       	std	Y+2, r25	; 0x02
    2984:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntrLoc = 0 ;
	uint8 u8CmdLoc  = 0 ;
	for ( u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc ++)
    2986:	de 01       	movw	r26, r28
    2988:	a2 57       	subi	r26, 0x72	; 114
    298a:	bf 4f       	sbci	r27, 0xFF	; 255
    298c:	fe 01       	movw	r30, r28
    298e:	e2 57       	subi	r30, 0x72	; 114
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 81       	ld	r24, Z
    2994:	8f 5f       	subi	r24, 0xFF	; 255
    2996:	8c 93       	st	X, r24
    2998:	fe 01       	movw	r30, r28
    299a:	e2 57       	subi	r30, 0x72	; 114
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 81       	ld	r24, Z
    29a0:	88 23       	and	r24, r24
    29a2:	11 f4       	brne	.+4      	; 0x29a8 <LCD_voidInit+0x1082>
    29a4:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <LCD_voidInit+0x36>
			_delay_ms(3);
		}
	}
	
	
}
    29a8:	c2 57       	subi	r28, 0x72	; 114
    29aa:	df 4f       	sbci	r29, 0xFF	; 255
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	1f 91       	pop	r17
    29bc:	0f 91       	pop	r16
    29be:	08 95       	ret

000029c0 <LCD_voidWriteCmd>:

void LCD_voidWriteCmd(uint8 u8LcdIndxCpy , uint8 u8CmdCpy)
{
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	ac 97       	sbiw	r28, 0x2c	; 44
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	8b a7       	std	Y+43, r24	; 0x2b
    29d6:	6c a7       	std	Y+44, r22	; 0x2c
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    29d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	c9 01       	movw	r24, r18
    29e0:	88 0f       	add	r24, r24
    29e2:	99 1f       	adc	r25, r25
    29e4:	82 0f       	add	r24, r18
    29e6:	93 1f       	adc	r25, r19
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	fc 01       	movw	r30, r24
    29f2:	ee 50       	subi	r30, 0x0E	; 14
    29f4:	fe 4f       	sbci	r31, 0xFE	; 254
    29f6:	80 81       	ld	r24, Z
    29f8:	81 70       	andi	r24, 0x01	; 1
    29fa:	81 30       	cpi	r24, 0x01	; 1
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <LCD_voidWriteCmd+0x40>
    29fe:	77 c0       	rjmp	.+238    	; 0x2aee <LCD_voidWriteCmd+0x12e>
	{
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy );
    2a00:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a02:	6c a5       	ldd	r22, Y+44	; 0x2c
    2a04:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	a0 e8       	ldi	r26, 0x80	; 128
    2a0e:	bf e3       	ldi	r27, 0x3F	; 63
    2a10:	8f a3       	std	Y+39, r24	; 0x27
    2a12:	98 a7       	std	Y+40, r25	; 0x28
    2a14:	a9 a7       	std	Y+41, r26	; 0x29
    2a16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a18:	6f a1       	ldd	r22, Y+39	; 0x27
    2a1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	4a ef       	ldi	r20, 0xFA	; 250
    2a26:	54 e4       	ldi	r21, 0x44	; 68
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	8b a3       	std	Y+35, r24	; 0x23
    2a32:	9c a3       	std	Y+36, r25	; 0x24
    2a34:	ad a3       	std	Y+37, r26	; 0x25
    2a36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a38:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e8       	ldi	r20, 0x80	; 128
    2a46:	5f e3       	ldi	r21, 0x3F	; 63
    2a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a4c:	88 23       	and	r24, r24
    2a4e:	2c f4       	brge	.+10     	; 0x2a5a <LCD_voidWriteCmd+0x9a>
		__ticks = 1;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	9a a3       	std	Y+34, r25	; 0x22
    2a56:	89 a3       	std	Y+33, r24	; 0x21
    2a58:	3f c0       	rjmp	.+126    	; 0x2ad8 <LCD_voidWriteCmd+0x118>
	else if (__tmp > 65535)
    2a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a60:	9e a1       	ldd	r25, Y+38	; 0x26
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	3f ef       	ldi	r19, 0xFF	; 255
    2a66:	4f e7       	ldi	r20, 0x7F	; 127
    2a68:	57 e4       	ldi	r21, 0x47	; 71
    2a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a6e:	18 16       	cp	r1, r24
    2a70:	4c f5       	brge	.+82     	; 0x2ac4 <LCD_voidWriteCmd+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a72:	6f a1       	ldd	r22, Y+39	; 0x27
    2a74:	78 a5       	ldd	r23, Y+40	; 0x28
    2a76:	89 a5       	ldd	r24, Y+41	; 0x29
    2a78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e2       	ldi	r20, 0x20	; 32
    2a80:	51 e4       	ldi	r21, 0x41	; 65
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	9a a3       	std	Y+34, r25	; 0x22
    2a98:	89 a3       	std	Y+33, r24	; 0x21
    2a9a:	0f c0       	rjmp	.+30     	; 0x2aba <LCD_voidWriteCmd+0xfa>
    2a9c:	88 ec       	ldi	r24, 0xC8	; 200
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	98 a3       	std	Y+32, r25	; 0x20
    2aa2:	8f 8f       	std	Y+31, r24	; 0x1f
    2aa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aa6:	98 a1       	ldd	r25, Y+32	; 0x20
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <LCD_voidWriteCmd+0xe8>
    2aac:	98 a3       	std	Y+32, r25	; 0x20
    2aae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	9a a3       	std	Y+34, r25	; 0x22
    2ab8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aba:	89 a1       	ldd	r24, Y+33	; 0x21
    2abc:	9a a1       	ldd	r25, Y+34	; 0x22
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	69 f7       	brne	.-38     	; 0x2a9c <LCD_voidWriteCmd+0xdc>
    2ac2:	05 c1       	rjmp	.+522    	; 0x2cce <LCD_voidWriteCmd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aca:	9e a1       	ldd	r25, Y+38	; 0x26
    2acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	9a a3       	std	Y+34, r25	; 0x22
    2ad6:	89 a3       	std	Y+33, r24	; 0x21
    2ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    2ada:	9a a1       	ldd	r25, Y+34	; 0x22
    2adc:	9e 8f       	std	Y+30, r25	; 0x1e
    2ade:	8d 8f       	std	Y+29, r24	; 0x1d
    2ae0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ae2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <LCD_voidWriteCmd+0x124>
    2ae8:	9e 8f       	std	Y+30, r25	; 0x1e
    2aea:	8d 8f       	std	Y+29, r24	; 0x1d
    2aec:	f0 c0       	rjmp	.+480    	; 0x2cce <LCD_voidWriteCmd+0x30e>
		_delay_ms(1);
	}
	else
	{
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy);  
    2aee:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af0:	6c a5       	ldd	r22, Y+44	; 0x2c
    2af2:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a0 e8       	ldi	r26, 0x80	; 128
    2afc:	bf e3       	ldi	r27, 0x3F	; 63
    2afe:	89 8f       	std	Y+25, r24	; 0x19
    2b00:	9a 8f       	std	Y+26, r25	; 0x1a
    2b02:	ab 8f       	std	Y+27, r26	; 0x1b
    2b04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b06:	69 8d       	ldd	r22, Y+25	; 0x19
    2b08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	4a ef       	ldi	r20, 0xFA	; 250
    2b14:	54 e4       	ldi	r21, 0x44	; 68
    2b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	8d 8b       	std	Y+21, r24	; 0x15
    2b20:	9e 8b       	std	Y+22, r25	; 0x16
    2b22:	af 8b       	std	Y+23, r26	; 0x17
    2b24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b26:	6d 89       	ldd	r22, Y+21	; 0x15
    2b28:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5f e3       	ldi	r21, 0x3F	; 63
    2b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	2c f4       	brge	.+10     	; 0x2b48 <LCD_voidWriteCmd+0x188>
		__ticks = 1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9c 8b       	std	Y+20, r25	; 0x14
    2b44:	8b 8b       	std	Y+19, r24	; 0x13
    2b46:	3f c0       	rjmp	.+126    	; 0x2bc6 <LCD_voidWriteCmd+0x206>
	else if (__tmp > 65535)
    2b48:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	4f e7       	ldi	r20, 0x7F	; 127
    2b56:	57 e4       	ldi	r21, 0x47	; 71
    2b58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b5c:	18 16       	cp	r1, r24
    2b5e:	4c f5       	brge	.+82     	; 0x2bb2 <LCD_voidWriteCmd+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	69 8d       	ldd	r22, Y+25	; 0x19
    2b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e2       	ldi	r20, 0x20	; 32
    2b6e:	51 e4       	ldi	r21, 0x41	; 65
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	9c 8b       	std	Y+20, r25	; 0x14
    2b86:	8b 8b       	std	Y+19, r24	; 0x13
    2b88:	0f c0       	rjmp	.+30     	; 0x2ba8 <LCD_voidWriteCmd+0x1e8>
    2b8a:	88 ec       	ldi	r24, 0xC8	; 200
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9a 8b       	std	Y+18, r25	; 0x12
    2b90:	89 8b       	std	Y+17, r24	; 0x11
    2b92:	89 89       	ldd	r24, Y+17	; 0x11
    2b94:	9a 89       	ldd	r25, Y+18	; 0x12
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <LCD_voidWriteCmd+0x1d6>
    2b9a:	9a 8b       	std	Y+18, r25	; 0x12
    2b9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	9c 8b       	std	Y+20, r25	; 0x14
    2ba6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba8:	8b 89       	ldd	r24, Y+19	; 0x13
    2baa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	69 f7       	brne	.-38     	; 0x2b8a <LCD_voidWriteCmd+0x1ca>
    2bb0:	14 c0       	rjmp	.+40     	; 0x2bda <LCD_voidWriteCmd+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	9c 8b       	std	Y+20, r25	; 0x14
    2bc4:	8b 8b       	std	Y+19, r24	; 0x13
    2bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bca:	98 8b       	std	Y+16, r25	; 0x10
    2bcc:	8f 87       	std	Y+15, r24	; 0x0f
    2bce:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd0:	98 89       	ldd	r25, Y+16	; 0x10
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <LCD_voidWriteCmd+0x212>
    2bd6:	98 8b       	std	Y+16, r25	; 0x10
    2bd8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy<<4);
    2bda:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bdc:	98 2f       	mov	r25, r24
    2bde:	92 95       	swap	r25
    2be0:	90 7f       	andi	r25, 0xF0	; 240
    2be2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2be4:	69 2f       	mov	r22, r25
    2be6:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a0 e8       	ldi	r26, 0x80	; 128
    2bf0:	bf e3       	ldi	r27, 0x3F	; 63
    2bf2:	8b 87       	std	Y+11, r24	; 0x0b
    2bf4:	9c 87       	std	Y+12, r25	; 0x0c
    2bf6:	ad 87       	std	Y+13, r26	; 0x0d
    2bf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a ef       	ldi	r20, 0xFA	; 250
    2c08:	54 e4       	ldi	r21, 0x44	; 68
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	8f 83       	std	Y+7, r24	; 0x07
    2c14:	98 87       	std	Y+8, r25	; 0x08
    2c16:	a9 87       	std	Y+9, r26	; 0x09
    2c18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1c:	78 85       	ldd	r23, Y+8	; 0x08
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <LCD_voidWriteCmd+0x27c>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <LCD_voidWriteCmd+0x2fa>
	else if (__tmp > 65535)
    2c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3e:	78 85       	ldd	r23, Y+8	; 0x08
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <LCD_voidWriteCmd+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <LCD_voidWriteCmd+0x2dc>
    2c7e:	88 ec       	ldi	r24, 0xC8	; 200
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <LCD_voidWriteCmd+0x2ca>
    2c8e:	9c 83       	std	Y+4, r25	; 0x04
    2c90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <LCD_voidWriteCmd+0x2be>
    2ca4:	14 c0       	rjmp	.+40     	; 0x2cce <LCD_voidWriteCmd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca8:	78 85       	ldd	r23, Y+8	; 0x08
    2caa:	89 85       	ldd	r24, Y+9	; 0x09
    2cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <LCD_voidWriteCmd+0x306>
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	
}
    2cce:	ac 96       	adiw	r28, 0x2c	; 44
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	de bf       	out	0x3e, r29	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	cd bf       	out	0x3d, r28	; 61
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <LCD_voidDisplayChar>:

void LCD_voidDisplayChar(uint8 u8LcdIndxCpy , uint8 u8CharCpy)
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	ac 97       	sbiw	r28, 0x2c	; 44
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	8b a7       	std	Y+43, r24	; 0x2b
    2cf6:	6c a7       	std	Y+44, r22	; 0x2c
	// Rs  1
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rs , DIO_HIGH );
    2cf8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	c9 01       	movw	r24, r18
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	82 0f       	add	r24, r18
    2d06:	93 1f       	adc	r25, r19
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	fc 01       	movw	r30, r24
    2d12:	ed 50       	subi	r30, 0x0D	; 13
    2d14:	fe 4f       	sbci	r31, 0xFE	; 254
    2d16:	80 81       	ld	r24, Z
    2d18:	61 e0       	ldi	r22, 0x01	; 1
    2d1a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
	
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    2d1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	c9 01       	movw	r24, r18
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	82 0f       	add	r24, r18
    2d2c:	93 1f       	adc	r25, r19
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	fc 01       	movw	r30, r24
    2d38:	ee 50       	subi	r30, 0x0E	; 14
    2d3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3c:	80 81       	ld	r24, Z
    2d3e:	81 70       	andi	r24, 0x01	; 1
    2d40:	81 30       	cpi	r24, 0x01	; 1
    2d42:	09 f0       	breq	.+2      	; 0x2d46 <LCD_voidDisplayChar+0x66>
    2d44:	77 c0       	rjmp	.+238    	; 0x2e34 <LCD_voidDisplayChar+0x154>
	{
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy);
    2d46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d48:	6c a5       	ldd	r22, Y+44	; 0x2c
    2d4a:	0e 94 36 18 	call	0x306c	; 0x306c <voidLcdHelper>
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	a0 e8       	ldi	r26, 0x80	; 128
    2d54:	bf e3       	ldi	r27, 0x3F	; 63
    2d56:	8f a3       	std	Y+39, r24	; 0x27
    2d58:	98 a7       	std	Y+40, r25	; 0x28
    2d5a:	a9 a7       	std	Y+41, r26	; 0x29
    2d5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d60:	78 a5       	ldd	r23, Y+40	; 0x28
    2d62:	89 a5       	ldd	r24, Y+41	; 0x29
    2d64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4a ef       	ldi	r20, 0xFA	; 250
    2d6c:	54 e4       	ldi	r21, 0x44	; 68
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	8b a3       	std	Y+35, r24	; 0x23
    2d78:	9c a3       	std	Y+36, r25	; 0x24
    2d7a:	ad a3       	std	Y+37, r26	; 0x25
    2d7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d80:	7c a1       	ldd	r23, Y+36	; 0x24
    2d82:	8d a1       	ldd	r24, Y+37	; 0x25
    2d84:	9e a1       	ldd	r25, Y+38	; 0x26
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e8       	ldi	r20, 0x80	; 128
    2d8c:	5f e3       	ldi	r21, 0x3F	; 63
    2d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d92:	88 23       	and	r24, r24
    2d94:	2c f4       	brge	.+10     	; 0x2da0 <LCD_voidDisplayChar+0xc0>
		__ticks = 1;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	9a a3       	std	Y+34, r25	; 0x22
    2d9c:	89 a3       	std	Y+33, r24	; 0x21
    2d9e:	3f c0       	rjmp	.+126    	; 0x2e1e <LCD_voidDisplayChar+0x13e>
	else if (__tmp > 65535)
    2da0:	6b a1       	ldd	r22, Y+35	; 0x23
    2da2:	7c a1       	ldd	r23, Y+36	; 0x24
    2da4:	8d a1       	ldd	r24, Y+37	; 0x25
    2da6:	9e a1       	ldd	r25, Y+38	; 0x26
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	3f ef       	ldi	r19, 0xFF	; 255
    2dac:	4f e7       	ldi	r20, 0x7F	; 127
    2dae:	57 e4       	ldi	r21, 0x47	; 71
    2db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db4:	18 16       	cp	r1, r24
    2db6:	4c f5       	brge	.+82     	; 0x2e0a <LCD_voidDisplayChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db8:	6f a1       	ldd	r22, Y+39	; 0x27
    2dba:	78 a5       	ldd	r23, Y+40	; 0x28
    2dbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2dbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e2       	ldi	r20, 0x20	; 32
    2dc6:	51 e4       	ldi	r21, 0x41	; 65
    2dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	bc 01       	movw	r22, r24
    2dd2:	cd 01       	movw	r24, r26
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	9a a3       	std	Y+34, r25	; 0x22
    2dde:	89 a3       	std	Y+33, r24	; 0x21
    2de0:	0f c0       	rjmp	.+30     	; 0x2e00 <LCD_voidDisplayChar+0x120>
    2de2:	88 ec       	ldi	r24, 0xC8	; 200
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	98 a3       	std	Y+32, r25	; 0x20
    2de8:	8f 8f       	std	Y+31, r24	; 0x1f
    2dea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dec:	98 a1       	ldd	r25, Y+32	; 0x20
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <LCD_voidDisplayChar+0x10e>
    2df2:	98 a3       	std	Y+32, r25	; 0x20
    2df4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df6:	89 a1       	ldd	r24, Y+33	; 0x21
    2df8:	9a a1       	ldd	r25, Y+34	; 0x22
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	9a a3       	std	Y+34, r25	; 0x22
    2dfe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e00:	89 a1       	ldd	r24, Y+33	; 0x21
    2e02:	9a a1       	ldd	r25, Y+34	; 0x22
    2e04:	00 97       	sbiw	r24, 0x00	; 0
    2e06:	69 f7       	brne	.-38     	; 0x2de2 <LCD_voidDisplayChar+0x102>
    2e08:	05 c1       	rjmp	.+522    	; 0x3014 <LCD_voidDisplayChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e10:	9e a1       	ldd	r25, Y+38	; 0x26
    2e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	9a a3       	std	Y+34, r25	; 0x22
    2e1c:	89 a3       	std	Y+33, r24	; 0x21
    2e1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e20:	9a a1       	ldd	r25, Y+34	; 0x22
    2e22:	9e 8f       	std	Y+30, r25	; 0x1e
    2e24:	8d 8f       	std	Y+29, r24	; 0x1d
    2e26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <LCD_voidDisplayChar+0x14a>
    2e2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e30:	8d 8f       	std	Y+29, r24	; 0x1d
    2e32:	f0 c0       	rjmp	.+480    	; 0x3014 <LCD_voidDisplayChar+0x334>
		_delay_ms(1);
	}
	else
	{
		
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy);  
    2e34:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e36:	6c a5       	ldd	r22, Y+44	; 0x2c
    2e38:	0e 94 36 18 	call	0x306c	; 0x306c <voidLcdHelper>
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	a0 e8       	ldi	r26, 0x80	; 128
    2e42:	bf e3       	ldi	r27, 0x3F	; 63
    2e44:	89 8f       	std	Y+25, r24	; 0x19
    2e46:	9a 8f       	std	Y+26, r25	; 0x1a
    2e48:	ab 8f       	std	Y+27, r26	; 0x1b
    2e4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	4a ef       	ldi	r20, 0xFA	; 250
    2e5a:	54 e4       	ldi	r21, 0x44	; 68
    2e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	8d 8b       	std	Y+21, r24	; 0x15
    2e66:	9e 8b       	std	Y+22, r25	; 0x16
    2e68:	af 8b       	std	Y+23, r26	; 0x17
    2e6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e70:	8f 89       	ldd	r24, Y+23	; 0x17
    2e72:	98 8d       	ldd	r25, Y+24	; 0x18
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	2c f4       	brge	.+10     	; 0x2e8e <LCD_voidDisplayChar+0x1ae>
		__ticks = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	9c 8b       	std	Y+20, r25	; 0x14
    2e8a:	8b 8b       	std	Y+19, r24	; 0x13
    2e8c:	3f c0       	rjmp	.+126    	; 0x2f0c <LCD_voidDisplayChar+0x22c>
	else if (__tmp > 65535)
    2e8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e90:	7e 89       	ldd	r23, Y+22	; 0x16
    2e92:	8f 89       	ldd	r24, Y+23	; 0x17
    2e94:	98 8d       	ldd	r25, Y+24	; 0x18
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	3f ef       	ldi	r19, 0xFF	; 255
    2e9a:	4f e7       	ldi	r20, 0x7F	; 127
    2e9c:	57 e4       	ldi	r21, 0x47	; 71
    2e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea2:	18 16       	cp	r1, r24
    2ea4:	4c f5       	brge	.+82     	; 0x2ef8 <LCD_voidDisplayChar+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ea8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e2       	ldi	r20, 0x20	; 32
    2eb4:	51 e4       	ldi	r21, 0x41	; 65
    2eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9c 8b       	std	Y+20, r25	; 0x14
    2ecc:	8b 8b       	std	Y+19, r24	; 0x13
    2ece:	0f c0       	rjmp	.+30     	; 0x2eee <LCD_voidDisplayChar+0x20e>
    2ed0:	88 ec       	ldi	r24, 0xC8	; 200
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	9a 8b       	std	Y+18, r25	; 0x12
    2ed6:	89 8b       	std	Y+17, r24	; 0x11
    2ed8:	89 89       	ldd	r24, Y+17	; 0x11
    2eda:	9a 89       	ldd	r25, Y+18	; 0x12
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <LCD_voidDisplayChar+0x1fc>
    2ee0:	9a 8b       	std	Y+18, r25	; 0x12
    2ee2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	9c 8b       	std	Y+20, r25	; 0x14
    2eec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	69 f7       	brne	.-38     	; 0x2ed0 <LCD_voidDisplayChar+0x1f0>
    2ef6:	14 c0       	rjmp	.+40     	; 0x2f20 <LCD_voidDisplayChar+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef8:	6d 89       	ldd	r22, Y+21	; 0x15
    2efa:	7e 89       	ldd	r23, Y+22	; 0x16
    2efc:	8f 89       	ldd	r24, Y+23	; 0x17
    2efe:	98 8d       	ldd	r25, Y+24	; 0x18
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9c 8b       	std	Y+20, r25	; 0x14
    2f0a:	8b 8b       	std	Y+19, r24	; 0x13
    2f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f10:	98 8b       	std	Y+16, r25	; 0x10
    2f12:	8f 87       	std	Y+15, r24	; 0x0f
    2f14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f16:	98 89       	ldd	r25, Y+16	; 0x10
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <LCD_voidDisplayChar+0x238>
    2f1c:	98 8b       	std	Y+16, r25	; 0x10
    2f1e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy<<4);
    2f20:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f22:	98 2f       	mov	r25, r24
    2f24:	92 95       	swap	r25
    2f26:	90 7f       	andi	r25, 0xF0	; 240
    2f28:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f2a:	69 2f       	mov	r22, r25
    2f2c:	0e 94 36 18 	call	0x306c	; 0x306c <voidLcdHelper>
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	a0 e8       	ldi	r26, 0x80	; 128
    2f36:	bf e3       	ldi	r27, 0x3F	; 63
    2f38:	8b 87       	std	Y+11, r24	; 0x0b
    2f3a:	9c 87       	std	Y+12, r25	; 0x0c
    2f3c:	ad 87       	std	Y+13, r26	; 0x0d
    2f3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4a ef       	ldi	r20, 0xFA	; 250
    2f4e:	54 e4       	ldi	r21, 0x44	; 68
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	8f 83       	std	Y+7, r24	; 0x07
    2f5a:	98 87       	std	Y+8, r25	; 0x08
    2f5c:	a9 87       	std	Y+9, r26	; 0x09
    2f5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f60:	6f 81       	ldd	r22, Y+7	; 0x07
    2f62:	78 85       	ldd	r23, Y+8	; 0x08
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e8       	ldi	r20, 0x80	; 128
    2f6e:	5f e3       	ldi	r21, 0x3F	; 63
    2f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f74:	88 23       	and	r24, r24
    2f76:	2c f4       	brge	.+10     	; 0x2f82 <LCD_voidDisplayChar+0x2a2>
		__ticks = 1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9e 83       	std	Y+6, r25	; 0x06
    2f7e:	8d 83       	std	Y+5, r24	; 0x05
    2f80:	3f c0       	rjmp	.+126    	; 0x3000 <LCD_voidDisplayChar+0x320>
	else if (__tmp > 65535)
    2f82:	6f 81       	ldd	r22, Y+7	; 0x07
    2f84:	78 85       	ldd	r23, Y+8	; 0x08
    2f86:	89 85       	ldd	r24, Y+9	; 0x09
    2f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	3f ef       	ldi	r19, 0xFF	; 255
    2f8e:	4f e7       	ldi	r20, 0x7F	; 127
    2f90:	57 e4       	ldi	r21, 0x47	; 71
    2f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f96:	18 16       	cp	r1, r24
    2f98:	4c f5       	brge	.+82     	; 0x2fec <LCD_voidDisplayChar+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	40 e2       	ldi	r20, 0x20	; 32
    2fa8:	51 e4       	ldi	r21, 0x41	; 65
    2faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
    2fc2:	0f c0       	rjmp	.+30     	; 0x2fe2 <LCD_voidDisplayChar+0x302>
    2fc4:	88 ec       	ldi	r24, 0xC8	; 200
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <LCD_voidDisplayChar+0x2f0>
    2fd4:	9c 83       	std	Y+4, r25	; 0x04
    2fd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	9e 83       	std	Y+6, r25	; 0x06
    2fe0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	69 f7       	brne	.-38     	; 0x2fc4 <LCD_voidDisplayChar+0x2e4>
    2fea:	14 c0       	rjmp	.+40     	; 0x3014 <LCD_voidDisplayChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fec:	6f 81       	ldd	r22, Y+7	; 0x07
    2fee:	78 85       	ldd	r23, Y+8	; 0x08
    2ff0:	89 85       	ldd	r24, Y+9	; 0x09
    2ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9e 83       	std	Y+6, r25	; 0x06
    2ffe:	8d 83       	std	Y+5, r24	; 0x05
    3000:	8d 81       	ldd	r24, Y+5	; 0x05
    3002:	9e 81       	ldd	r25, Y+6	; 0x06
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	9a 81       	ldd	r25, Y+2	; 0x02
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <LCD_voidDisplayChar+0x32c>
    3010:	9a 83       	std	Y+2, r25	; 0x02
    3012:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	
}
    3014:	ac 96       	adiw	r28, 0x2c	; 44
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <voidWriteCmd>:

static void voidWriteCmd(uint8 u8LcdIndxCpy , uint8 u8CmdCpy)
{
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	00 d0       	rcall	.+0      	; 0x302c <voidWriteCmd+0x6>
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	6a 83       	std	Y+2, r22	; 0x02
    // Rs  0
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rs , DIO_LOW );
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	28 2f       	mov	r18, r24
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	c9 01       	movw	r24, r18
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	82 0f       	add	r24, r18
    3042:	93 1f       	adc	r25, r19
    3044:	88 0f       	add	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	88 0f       	add	r24, r24
    304a:	99 1f       	adc	r25, r25
    304c:	fc 01       	movw	r30, r24
    304e:	ed 50       	subi	r30, 0x0D	; 13
    3050:	fe 4f       	sbci	r31, 0xFE	; 254
    3052:	80 81       	ld	r24, Z
    3054:	60 e0       	ldi	r22, 0x00	; 0
    3056:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
	
	voidLcdHelper( u8LcdIndxCpy, u8CmdCpy);
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	6a 81       	ldd	r22, Y+2	; 0x02
    305e:	0e 94 36 18 	call	0x306c	; 0x306c <voidLcdHelper>
	

}
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <voidLcdHelper>:

static void voidLcdHelper(uint8 u8LcdIndxCpy , uint8 u8CmdDataCpy)
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	6f 97       	sbiw	r28, 0x1f	; 31
    3076:	0f b6       	in	r0, 0x3f	; 63
    3078:	f8 94       	cli
    307a:	de bf       	out	0x3e, r29	; 62
    307c:	0f be       	out	0x3f, r0	; 63
    307e:	cd bf       	out	0x3d, r28	; 61
    3080:	8e 8f       	std	Y+30, r24	; 0x1e
    3082:	6f 8f       	std	Y+31, r22	; 0x1f
	uint8 u8CntrLoc ;
	// RW  0
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rw , DIO_LOW );
    3084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3086:	28 2f       	mov	r18, r24
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	c9 01       	movw	r24, r18
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	82 0f       	add	r24, r18
    3092:	93 1f       	adc	r25, r19
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	fc 01       	movw	r30, r24
    30a0:	ee 50       	subi	r30, 0x0E	; 14
    30a2:	fe 4f       	sbci	r31, 0xFE	; 254
    30a4:	80 81       	ld	r24, Z
    30a6:	60 e0       	ldi	r22, 0x00	; 0
    30a8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
	//latch start
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8En , DIO_HIGH );
    30ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30ae:	28 2f       	mov	r18, r24
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	c9 01       	movw	r24, r18
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	82 0f       	add	r24, r18
    30ba:	93 1f       	adc	r25, r19
    30bc:	88 0f       	add	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	88 0f       	add	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	fc 01       	movw	r30, r24
    30c6:	eb 50       	subi	r30, 0x0B	; 11
    30c8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ca:	80 81       	ld	r24, Z
    30cc:	61 e0       	ldi	r22, 0x01	; 1
    30ce:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
	
	// check 4 bit 8
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    30d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30d4:	28 2f       	mov	r18, r24
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	c9 01       	movw	r24, r18
    30da:	88 0f       	add	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	82 0f       	add	r24, r18
    30e0:	93 1f       	adc	r25, r19
    30e2:	88 0f       	add	r24, r24
    30e4:	99 1f       	adc	r25, r25
    30e6:	88 0f       	add	r24, r24
    30e8:	99 1f       	adc	r25, r25
    30ea:	fc 01       	movw	r30, r24
    30ec:	ee 50       	subi	r30, 0x0E	; 14
    30ee:	fe 4f       	sbci	r31, 0xFE	; 254
    30f0:	80 81       	ld	r24, Z
    30f2:	81 70       	andi	r24, 0x01	; 1
    30f4:	81 30       	cpi	r24, 0x01	; 1
    30f6:	89 f5       	brne	.+98     	; 0x315a <voidLcdHelper+0xee>
	{
		// send cmd or data 8 bit
		for (u8CntrLoc = 0; u8CntrLoc < 8 ; u8CntrLoc++)
    30f8:	1d 8e       	std	Y+29, r1	; 0x1d
    30fa:	2b c0       	rjmp	.+86     	; 0x3152 <voidLcdHelper+0xe6>
		{                   /* Rakm elselka                                                          cmd or data  */
			DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Data[u8CntrLoc] , GET_BIT(u8CmdDataCpy,u8CntrLoc) );
    30fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30fe:	28 2f       	mov	r18, r24
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3104:	48 2f       	mov	r20, r24
    3106:	50 e0       	ldi	r21, 0x00	; 0
    3108:	c9 01       	movw	r24, r18
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	82 0f       	add	r24, r18
    3110:	93 1f       	adc	r25, r19
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	84 0f       	add	r24, r20
    311c:	95 1f       	adc	r25, r21
    311e:	fc 01       	movw	r30, r24
    3120:	ea 50       	subi	r30, 0x0A	; 10
    3122:	fe 4f       	sbci	r31, 0xFE	; 254
    3124:	40 81       	ld	r20, Z
    3126:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	b9 01       	movw	r22, r18
    3134:	02 c0       	rjmp	.+4      	; 0x313a <voidLcdHelper+0xce>
    3136:	75 95       	asr	r23
    3138:	67 95       	ror	r22
    313a:	8a 95       	dec	r24
    313c:	e2 f7       	brpl	.-8      	; 0x3136 <voidLcdHelper+0xca>
    313e:	cb 01       	movw	r24, r22
    3140:	98 2f       	mov	r25, r24
    3142:	91 70       	andi	r25, 0x01	; 1
    3144:	84 2f       	mov	r24, r20
    3146:	69 2f       	mov	r22, r25
    3148:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
	
	// check 4 bit 8
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
	{
		// send cmd or data 8 bit
		for (u8CntrLoc = 0; u8CntrLoc < 8 ; u8CntrLoc++)
    314c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    314e:	8f 5f       	subi	r24, 0xFF	; 255
    3150:	8d 8f       	std	Y+29, r24	; 0x1d
    3152:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3154:	88 30       	cpi	r24, 0x08	; 8
    3156:	90 f2       	brcs	.-92     	; 0x30fc <voidLcdHelper+0x90>
    3158:	31 c0       	rjmp	.+98     	; 0x31bc <voidLcdHelper+0x150>
		}
	}
	else
	{
		// send cmd or data 4 bit
		for (u8CntrLoc = 4; u8CntrLoc < 8 ; u8CntrLoc++)
    315a:	84 e0       	ldi	r24, 0x04	; 4
    315c:	8d 8f       	std	Y+29, r24	; 0x1d
    315e:	2b c0       	rjmp	.+86     	; 0x31b6 <voidLcdHelper+0x14a>
		{
			DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Data[u8CntrLoc] , GET_BIT(u8CmdDataCpy,u8CntrLoc) );
    3160:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3168:	48 2f       	mov	r20, r24
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	c9 01       	movw	r24, r18
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	82 0f       	add	r24, r18
    3174:	93 1f       	adc	r25, r19
    3176:	88 0f       	add	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	88 0f       	add	r24, r24
    317c:	99 1f       	adc	r25, r25
    317e:	84 0f       	add	r24, r20
    3180:	95 1f       	adc	r25, r21
    3182:	fc 01       	movw	r30, r24
    3184:	ea 50       	subi	r30, 0x0A	; 10
    3186:	fe 4f       	sbci	r31, 0xFE	; 254
    3188:	40 81       	ld	r20, Z
    318a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3192:	88 2f       	mov	r24, r24
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	b9 01       	movw	r22, r18
    3198:	02 c0       	rjmp	.+4      	; 0x319e <voidLcdHelper+0x132>
    319a:	75 95       	asr	r23
    319c:	67 95       	ror	r22
    319e:	8a 95       	dec	r24
    31a0:	e2 f7       	brpl	.-8      	; 0x319a <voidLcdHelper+0x12e>
    31a2:	cb 01       	movw	r24, r22
    31a4:	98 2f       	mov	r25, r24
    31a6:	91 70       	andi	r25, 0x01	; 1
    31a8:	84 2f       	mov	r24, r20
    31aa:	69 2f       	mov	r22, r25
    31ac:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
		}
	}
	else
	{
		// send cmd or data 4 bit
		for (u8CntrLoc = 4; u8CntrLoc < 8 ; u8CntrLoc++)
    31b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b2:	8f 5f       	subi	r24, 0xFF	; 255
    31b4:	8d 8f       	std	Y+29, r24	; 0x1d
    31b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b8:	88 30       	cpi	r24, 0x08	; 8
    31ba:	90 f2       	brcs	.-92     	; 0x3160 <voidLcdHelper+0xf4>
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	a0 e2       	ldi	r26, 0x20	; 32
    31c2:	b1 e4       	ldi	r27, 0x41	; 65
    31c4:	89 8f       	std	Y+25, r24	; 0x19
    31c6:	9a 8f       	std	Y+26, r25	; 0x1a
    31c8:	ab 8f       	std	Y+27, r26	; 0x1b
    31ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	69 8d       	ldd	r22, Y+25	; 0x19
    31ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	4a ef       	ldi	r20, 0xFA	; 250
    31da:	54 e4       	ldi	r21, 0x44	; 68
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	8d 8b       	std	Y+21, r24	; 0x15
    31e6:	9e 8b       	std	Y+22, r25	; 0x16
    31e8:	af 8b       	std	Y+23, r26	; 0x17
    31ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31ec:	6d 89       	ldd	r22, Y+21	; 0x15
    31ee:	7e 89       	ldd	r23, Y+22	; 0x16
    31f0:	8f 89       	ldd	r24, Y+23	; 0x17
    31f2:	98 8d       	ldd	r25, Y+24	; 0x18
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e8       	ldi	r20, 0x80	; 128
    31fa:	5f e3       	ldi	r21, 0x3F	; 63
    31fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3200:	88 23       	and	r24, r24
    3202:	2c f4       	brge	.+10     	; 0x320e <voidLcdHelper+0x1a2>
		__ticks = 1;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	9c 8b       	std	Y+20, r25	; 0x14
    320a:	8b 8b       	std	Y+19, r24	; 0x13
    320c:	3f c0       	rjmp	.+126    	; 0x328c <voidLcdHelper+0x220>
	else if (__tmp > 65535)
    320e:	6d 89       	ldd	r22, Y+21	; 0x15
    3210:	7e 89       	ldd	r23, Y+22	; 0x16
    3212:	8f 89       	ldd	r24, Y+23	; 0x17
    3214:	98 8d       	ldd	r25, Y+24	; 0x18
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	3f ef       	ldi	r19, 0xFF	; 255
    321a:	4f e7       	ldi	r20, 0x7F	; 127
    321c:	57 e4       	ldi	r21, 0x47	; 71
    321e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3222:	18 16       	cp	r1, r24
    3224:	4c f5       	brge	.+82     	; 0x3278 <voidLcdHelper+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3226:	69 8d       	ldd	r22, Y+25	; 0x19
    3228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    322a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    322c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e2       	ldi	r20, 0x20	; 32
    3234:	51 e4       	ldi	r21, 0x41	; 65
    3236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	9c 8b       	std	Y+20, r25	; 0x14
    324c:	8b 8b       	std	Y+19, r24	; 0x13
    324e:	0f c0       	rjmp	.+30     	; 0x326e <voidLcdHelper+0x202>
    3250:	88 ec       	ldi	r24, 0xC8	; 200
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9a 8b       	std	Y+18, r25	; 0x12
    3256:	89 8b       	std	Y+17, r24	; 0x11
    3258:	89 89       	ldd	r24, Y+17	; 0x11
    325a:	9a 89       	ldd	r25, Y+18	; 0x12
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <voidLcdHelper+0x1f0>
    3260:	9a 8b       	std	Y+18, r25	; 0x12
    3262:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3264:	8b 89       	ldd	r24, Y+19	; 0x13
    3266:	9c 89       	ldd	r25, Y+20	; 0x14
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	9c 8b       	std	Y+20, r25	; 0x14
    326c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326e:	8b 89       	ldd	r24, Y+19	; 0x13
    3270:	9c 89       	ldd	r25, Y+20	; 0x14
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	69 f7       	brne	.-38     	; 0x3250 <voidLcdHelper+0x1e4>
    3276:	14 c0       	rjmp	.+40     	; 0x32a0 <voidLcdHelper+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3278:	6d 89       	ldd	r22, Y+21	; 0x15
    327a:	7e 89       	ldd	r23, Y+22	; 0x16
    327c:	8f 89       	ldd	r24, Y+23	; 0x17
    327e:	98 8d       	ldd	r25, Y+24	; 0x18
    3280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	9c 8b       	std	Y+20, r25	; 0x14
    328a:	8b 8b       	std	Y+19, r24	; 0x13
    328c:	8b 89       	ldd	r24, Y+19	; 0x13
    328e:	9c 89       	ldd	r25, Y+20	; 0x14
    3290:	98 8b       	std	Y+16, r25	; 0x10
    3292:	8f 87       	std	Y+15, r24	; 0x0f
    3294:	8f 85       	ldd	r24, Y+15	; 0x0f
    3296:	98 89       	ldd	r25, Y+16	; 0x10
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <voidLcdHelper+0x22c>
    329c:	98 8b       	std	Y+16, r25	; 0x10
    329e:	8f 87       	std	Y+15, r24	; 0x0f
		}
	}
	
	//latch
	_delay_ms(10);
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8En , DIO_LOW );
    32a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	c9 01       	movw	r24, r18
    32a8:	88 0f       	add	r24, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	82 0f       	add	r24, r18
    32ae:	93 1f       	adc	r25, r19
    32b0:	88 0f       	add	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	88 0f       	add	r24, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	fc 01       	movw	r30, r24
    32ba:	eb 50       	subi	r30, 0x0B	; 11
    32bc:	fe 4f       	sbci	r31, 0xFE	; 254
    32be:	80 81       	ld	r24, Z
    32c0:	60 e0       	ldi	r22, 0x00	; 0
    32c2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	a0 e2       	ldi	r26, 0x20	; 32
    32cc:	b1 e4       	ldi	r27, 0x41	; 65
    32ce:	8b 87       	std	Y+11, r24	; 0x0b
    32d0:	9c 87       	std	Y+12, r25	; 0x0c
    32d2:	ad 87       	std	Y+13, r26	; 0x0d
    32d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32da:	8d 85       	ldd	r24, Y+13	; 0x0d
    32dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	4a ef       	ldi	r20, 0xFA	; 250
    32e4:	54 e4       	ldi	r21, 0x44	; 68
    32e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	8f 83       	std	Y+7, r24	; 0x07
    32f0:	98 87       	std	Y+8, r25	; 0x08
    32f2:	a9 87       	std	Y+9, r26	; 0x09
    32f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32f6:	6f 81       	ldd	r22, Y+7	; 0x07
    32f8:	78 85       	ldd	r23, Y+8	; 0x08
    32fa:	89 85       	ldd	r24, Y+9	; 0x09
    32fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	40 e8       	ldi	r20, 0x80	; 128
    3304:	5f e3       	ldi	r21, 0x3F	; 63
    3306:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    330a:	88 23       	and	r24, r24
    330c:	2c f4       	brge	.+10     	; 0x3318 <voidLcdHelper+0x2ac>
		__ticks = 1;
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	9e 83       	std	Y+6, r25	; 0x06
    3314:	8d 83       	std	Y+5, r24	; 0x05
    3316:	3f c0       	rjmp	.+126    	; 0x3396 <voidLcdHelper+0x32a>
	else if (__tmp > 65535)
    3318:	6f 81       	ldd	r22, Y+7	; 0x07
    331a:	78 85       	ldd	r23, Y+8	; 0x08
    331c:	89 85       	ldd	r24, Y+9	; 0x09
    331e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	3f ef       	ldi	r19, 0xFF	; 255
    3324:	4f e7       	ldi	r20, 0x7F	; 127
    3326:	57 e4       	ldi	r21, 0x47	; 71
    3328:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    332c:	18 16       	cp	r1, r24
    332e:	4c f5       	brge	.+82     	; 0x3382 <voidLcdHelper+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3330:	6b 85       	ldd	r22, Y+11	; 0x0b
    3332:	7c 85       	ldd	r23, Y+12	; 0x0c
    3334:	8d 85       	ldd	r24, Y+13	; 0x0d
    3336:	9e 85       	ldd	r25, Y+14	; 0x0e
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	40 e2       	ldi	r20, 0x20	; 32
    333e:	51 e4       	ldi	r21, 0x41	; 65
    3340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	bc 01       	movw	r22, r24
    334a:	cd 01       	movw	r24, r26
    334c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	9e 83       	std	Y+6, r25	; 0x06
    3356:	8d 83       	std	Y+5, r24	; 0x05
    3358:	0f c0       	rjmp	.+30     	; 0x3378 <voidLcdHelper+0x30c>
    335a:	88 ec       	ldi	r24, 0xC8	; 200
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	9c 83       	std	Y+4, r25	; 0x04
    3360:	8b 83       	std	Y+3, r24	; 0x03
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	9c 81       	ldd	r25, Y+4	; 0x04
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	f1 f7       	brne	.-4      	; 0x3366 <voidLcdHelper+0x2fa>
    336a:	9c 83       	std	Y+4, r25	; 0x04
    336c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336e:	8d 81       	ldd	r24, Y+5	; 0x05
    3370:	9e 81       	ldd	r25, Y+6	; 0x06
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3378:	8d 81       	ldd	r24, Y+5	; 0x05
    337a:	9e 81       	ldd	r25, Y+6	; 0x06
    337c:	00 97       	sbiw	r24, 0x00	; 0
    337e:	69 f7       	brne	.-38     	; 0x335a <voidLcdHelper+0x2ee>
    3380:	14 c0       	rjmp	.+40     	; 0x33aa <voidLcdHelper+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3382:	6f 81       	ldd	r22, Y+7	; 0x07
    3384:	78 85       	ldd	r23, Y+8	; 0x08
    3386:	89 85       	ldd	r24, Y+9	; 0x09
    3388:	9a 85       	ldd	r25, Y+10	; 0x0a
    338a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	9e 83       	std	Y+6, r25	; 0x06
    3394:	8d 83       	std	Y+5, r24	; 0x05
    3396:	8d 81       	ldd	r24, Y+5	; 0x05
    3398:	9e 81       	ldd	r25, Y+6	; 0x06
    339a:	9a 83       	std	Y+2, r25	; 0x02
    339c:	89 83       	std	Y+1, r24	; 0x01
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	9a 81       	ldd	r25, Y+2	; 0x02
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <voidLcdHelper+0x336>
    33a6:	9a 83       	std	Y+2, r25	; 0x02
    33a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    33aa:	6f 96       	adiw	r28, 0x1f	; 31
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <LCD_voidDisplayString>:
void LCD_voidDisplayString(uint8 u8LcdIndxCpy , uint8 * u8StrCpy)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <LCD_voidDisplayString+0x6>
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <LCD_voidDisplayString+0x8>
    33c4:	0f 92       	push	r0
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	8b 83       	std	Y+3, r24	; 0x03
    33cc:	7d 83       	std	Y+5, r23	; 0x05
    33ce:	6c 83       	std	Y+4, r22	; 0x04
	voidWriteCmd(0,0x06);
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	66 e0       	ldi	r22, 0x06	; 6
    33d4:	0e 94 13 18 	call	0x3026	; 0x3026 <voidWriteCmd>
	int i =0;
    33d8:	1a 82       	std	Y+2, r1	; 0x02
    33da:	19 82       	std	Y+1, r1	; 0x01
    33dc:	11 c0       	rjmp	.+34     	; 0x3400 <LCD_voidDisplayString+0x44>
	while(u8StrCpy[i]!='\0')
	{
	LCD_voidDisplayChar(u8LcdIndxCpy,u8StrCpy[i]);
    33de:	29 81       	ldd	r18, Y+1	; 0x01
    33e0:	3a 81       	ldd	r19, Y+2	; 0x02
    33e2:	8c 81       	ldd	r24, Y+4	; 0x04
    33e4:	9d 81       	ldd	r25, Y+5	; 0x05
    33e6:	fc 01       	movw	r30, r24
    33e8:	e2 0f       	add	r30, r18
    33ea:	f3 1f       	adc	r31, r19
    33ec:	90 81       	ld	r25, Z
    33ee:	8b 81       	ldd	r24, Y+3	; 0x03
    33f0:	69 2f       	mov	r22, r25
    33f2:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <LCD_voidDisplayChar>
	//voidWriteCmd(0,0x06);

	i++;
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	01 96       	adiw	r24, 0x01	; 1
    33fc:	9a 83       	std	Y+2, r25	; 0x02
    33fe:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_voidDisplayString(uint8 u8LcdIndxCpy , uint8 * u8StrCpy)
{
	voidWriteCmd(0,0x06);
	int i =0;
	while(u8StrCpy[i]!='\0')
    3400:	29 81       	ldd	r18, Y+1	; 0x01
    3402:	3a 81       	ldd	r19, Y+2	; 0x02
    3404:	8c 81       	ldd	r24, Y+4	; 0x04
    3406:	9d 81       	ldd	r25, Y+5	; 0x05
    3408:	fc 01       	movw	r30, r24
    340a:	e2 0f       	add	r30, r18
    340c:	f3 1f       	adc	r31, r19
    340e:	80 81       	ld	r24, Z
    3410:	88 23       	and	r24, r24
    3412:	29 f7       	brne	.-54     	; 0x33de <LCD_voidDisplayString+0x22>
	LCD_voidDisplayChar(u8LcdIndxCpy,u8StrCpy[i]);
	//voidWriteCmd(0,0x06);

	i++;
	}
}
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	cf 91       	pop	r28
    3420:	df 91       	pop	r29
    3422:	08 95       	ret

00003424 <main>:
#include "EEPROM.h"

#include <util/delay.h>

uint8 u8ControllerState=1;
int main(void) {
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	c2 55       	subi	r28, 0x52	; 82
    3432:	d0 40       	sbci	r29, 0x00	; 0
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
	uint8 u8PressedLoc = 0xFF;
    343e:	fe 01       	movw	r30, r28
    3440:	ee 5a       	subi	r30, 0xAE	; 174
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	8f ef       	ldi	r24, 0xFF	; 255
    3446:	80 83       	st	Z, r24
	DIO_voidInit();
    3448:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_voidInit>
	ADC_voidInit();
    344c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <ADC_voidInit>
	LCD_voidInit();
    3450:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_voidInit>
	KEYPAD_voidInit();
    3454:	0e 94 3f 0a 	call	0x147e	; 0x147e <KEYPAD_voidInit>
	ADC_voidEnable();
    3458:	0e 94 9c 06 	call	0xd38	; 0xd38 <ADC_voidEnable>
	uint8 Calc_flag = 0,GetOut_flag=0;
    345c:	fe 01       	movw	r30, r28
    345e:	ef 5a       	subi	r30, 0xAF	; 175
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	10 82       	st	Z, r1
    3464:	fe 01       	movw	r30, r28
    3466:	e0 5b       	subi	r30, 0xB0	; 176
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	10 82       	st	Z, r1
	uint16 Loc_s16_ADCDigitalValue = 0,i;
    346c:	fe 01       	movw	r30, r28
    346e:	e2 5b       	subi	r30, 0xB2	; 178
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	11 82       	std	Z+1, r1	; 0x01
    3474:	10 82       	st	Z, r1
	uint8 Local_s8AnalogValue = 0, hundreds=0, tens=0, ones=0, InputTemp=0;
    3476:	fe 01       	movw	r30, r28
    3478:	e5 5b       	subi	r30, 0xB5	; 181
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	10 82       	st	Z, r1
    347e:	fe 01       	movw	r30, r28
    3480:	e6 5b       	subi	r30, 0xB6	; 182
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	10 82       	st	Z, r1
    3486:	fe 01       	movw	r30, r28
    3488:	e7 5b       	subi	r30, 0xB7	; 183
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	10 82       	st	Z, r1
    348e:	fe 01       	movw	r30, r28
    3490:	e8 5b       	subi	r30, 0xB8	; 184
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	10 82       	st	Z, r1
    3496:	fe 01       	movw	r30, r28
    3498:	e9 5b       	subi	r30, 0xB9	; 185
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	10 82       	st	Z, r1
	u8ControllerState=EEPROM_u8ReadByte(0);
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	0e 94 0a 0a 	call	0x1414	; 0x1414 <EEPROM_u8ReadByte>
    34a6:	80 93 fe 01 	sts	0x01FE, r24
	while (1) {
		Calc_flag = 0;
    34aa:	fe 01       	movw	r30, r28
    34ac:	ef 5a       	subi	r30, 0xAF	; 175
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	10 82       	st	Z, r1
		LCD_voidWriteCmd(0, 0x01);
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	61 e0       	ldi	r22, 0x01	; 1
    34b6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
		LCD_voidDisplayString(0, "Temperature=");
    34ba:	20 e6       	ldi	r18, 0x60	; 96
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	b9 01       	movw	r22, r18
    34c2:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>
		while (1) {

			u8PressedLoc = KEYPAD_u8GetPressedKey(0);
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	0e 94 b6 0a 	call	0x156c	; 0x156c <KEYPAD_u8GetPressedKey>
    34cc:	fe 01       	movw	r30, r28
    34ce:	ee 5a       	subi	r30, 0xAE	; 174
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	80 83       	st	Z, r24

			if (u8PressedLoc != 0xFF) {
    34d4:	fe 01       	movw	r30, r28
    34d6:	ee 5a       	subi	r30, 0xAE	; 174
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	80 81       	ld	r24, Z
    34dc:	8f 3f       	cpi	r24, 0xFF	; 255
    34de:	99 f3       	breq	.-26     	; 0x34c6 <main+0xa2>
				LCD_voidDisplayChar(0, u8PressedLoc);
    34e0:	fe 01       	movw	r30, r28
    34e2:	ee 5a       	subi	r30, 0xAE	; 174
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	60 81       	ld	r22, Z
    34ea:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <LCD_voidDisplayChar>
				hundreds = u8PressedLoc - 48;
    34ee:	de 01       	movw	r26, r28
    34f0:	a6 5b       	subi	r26, 0xB6	; 182
    34f2:	bf 4f       	sbci	r27, 0xFF	; 255
    34f4:	fe 01       	movw	r30, r28
    34f6:	ee 5a       	subi	r30, 0xAE	; 174
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	80 81       	ld	r24, Z
    34fc:	80 53       	subi	r24, 0x30	; 48
    34fe:	8c 93       	st	X, r24
				u8PressedLoc = 0xFF;
    3500:	fe 01       	movw	r30, r28
    3502:	ee 5a       	subi	r30, 0xAE	; 174
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	8f ef       	ldi	r24, 0xFF	; 255
    3508:	80 83       	st	Z, r24
    350a:	fe 01       	movw	r30, r28
    350c:	ed 5b       	subi	r30, 0xBD	; 189
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	a8 ec       	ldi	r26, 0xC8	; 200
    3516:	b2 e4       	ldi	r27, 0x42	; 66
    3518:	80 83       	st	Z, r24
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	a2 83       	std	Z+2, r26	; 0x02
    351e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3520:	8e 01       	movw	r16, r28
    3522:	01 5c       	subi	r16, 0xC1	; 193
    3524:	1f 4f       	sbci	r17, 0xFF	; 255
    3526:	fe 01       	movw	r30, r28
    3528:	ed 5b       	subi	r30, 0xBD	; 189
    352a:	ff 4f       	sbci	r31, 0xFF	; 255
    352c:	60 81       	ld	r22, Z
    352e:	71 81       	ldd	r23, Z+1	; 0x01
    3530:	82 81       	ldd	r24, Z+2	; 0x02
    3532:	93 81       	ldd	r25, Z+3	; 0x03
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	4a ef       	ldi	r20, 0xFA	; 250
    353a:	54 e4       	ldi	r21, 0x44	; 68
    353c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	f8 01       	movw	r30, r16
    3546:	80 83       	st	Z, r24
    3548:	91 83       	std	Z+1, r25	; 0x01
    354a:	a2 83       	std	Z+2, r26	; 0x02
    354c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    354e:	fe 01       	movw	r30, r28
    3550:	ff 96       	adiw	r30, 0x3f	; 63
    3552:	60 81       	ld	r22, Z
    3554:	71 81       	ldd	r23, Z+1	; 0x01
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	93 81       	ldd	r25, Z+3	; 0x03
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	40 e8       	ldi	r20, 0x80	; 128
    3560:	5f e3       	ldi	r21, 0x3F	; 63
    3562:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3566:	88 23       	and	r24, r24
    3568:	2c f4       	brge	.+10     	; 0x3574 <main+0x150>
		__ticks = 1;
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	9e af       	std	Y+62, r25	; 0x3e
    3570:	8d af       	std	Y+61, r24	; 0x3d
    3572:	46 c0       	rjmp	.+140    	; 0x3600 <main+0x1dc>
	else if (__tmp > 65535)
    3574:	fe 01       	movw	r30, r28
    3576:	ff 96       	adiw	r30, 0x3f	; 63
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	3f ef       	ldi	r19, 0xFF	; 255
    3584:	4f e7       	ldi	r20, 0x7F	; 127
    3586:	57 e4       	ldi	r21, 0x47	; 71
    3588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    358c:	18 16       	cp	r1, r24
    358e:	64 f5       	brge	.+88     	; 0x35e8 <main+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3590:	fe 01       	movw	r30, r28
    3592:	ed 5b       	subi	r30, 0xBD	; 189
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e2       	ldi	r20, 0x20	; 32
    35a4:	51 e4       	ldi	r21, 0x41	; 65
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	9e af       	std	Y+62, r25	; 0x3e
    35bc:	8d af       	std	Y+61, r24	; 0x3d
    35be:	0f c0       	rjmp	.+30     	; 0x35de <main+0x1ba>
    35c0:	88 ec       	ldi	r24, 0xC8	; 200
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	9c af       	std	Y+60, r25	; 0x3c
    35c6:	8b af       	std	Y+59, r24	; 0x3b
    35c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    35ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <main+0x1a8>
    35d0:	9c af       	std	Y+60, r25	; 0x3c
    35d2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    35d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	9e af       	std	Y+62, r25	; 0x3e
    35dc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35de:	8d ad       	ldd	r24, Y+61	; 0x3d
    35e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	69 f7       	brne	.-38     	; 0x35c0 <main+0x19c>
    35e6:	16 c0       	rjmp	.+44     	; 0x3614 <main+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e8:	fe 01       	movw	r30, r28
    35ea:	ff 96       	adiw	r30, 0x3f	; 63
    35ec:	60 81       	ld	r22, Z
    35ee:	71 81       	ldd	r23, Z+1	; 0x01
    35f0:	82 81       	ldd	r24, Z+2	; 0x02
    35f2:	93 81       	ldd	r25, Z+3	; 0x03
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	9e af       	std	Y+62, r25	; 0x3e
    35fe:	8d af       	std	Y+61, r24	; 0x3d
    3600:	8d ad       	ldd	r24, Y+61	; 0x3d
    3602:	9e ad       	ldd	r25, Y+62	; 0x3e
    3604:	9a af       	std	Y+58, r25	; 0x3a
    3606:	89 af       	std	Y+57, r24	; 0x39
    3608:	89 ad       	ldd	r24, Y+57	; 0x39
    360a:	9a ad       	ldd	r25, Y+58	; 0x3a
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <main+0x1e8>
    3610:	9a af       	std	Y+58, r25	; 0x3a
    3612:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(100);
				break;
			}
		}
		while (1) {
			u8PressedLoc = KEYPAD_u8GetPressedKey(0);
    3614:	80 e0       	ldi	r24, 0x00	; 0
    3616:	0e 94 b6 0a 	call	0x156c	; 0x156c <KEYPAD_u8GetPressedKey>
    361a:	fe 01       	movw	r30, r28
    361c:	ee 5a       	subi	r30, 0xAE	; 174
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	80 83       	st	Z, r24

			if (u8PressedLoc != 0xFF) {
    3622:	fe 01       	movw	r30, r28
    3624:	ee 5a       	subi	r30, 0xAE	; 174
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	80 81       	ld	r24, Z
    362a:	8f 3f       	cpi	r24, 0xFF	; 255
    362c:	99 f3       	breq	.-26     	; 0x3614 <main+0x1f0>
				LCD_voidDisplayChar(0, u8PressedLoc);
    362e:	fe 01       	movw	r30, r28
    3630:	ee 5a       	subi	r30, 0xAE	; 174
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	60 81       	ld	r22, Z
    3638:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <LCD_voidDisplayChar>
				tens = u8PressedLoc - 48;
    363c:	de 01       	movw	r26, r28
    363e:	a7 5b       	subi	r26, 0xB7	; 183
    3640:	bf 4f       	sbci	r27, 0xFF	; 255
    3642:	fe 01       	movw	r30, r28
    3644:	ee 5a       	subi	r30, 0xAE	; 174
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 81       	ld	r24, Z
    364a:	80 53       	subi	r24, 0x30	; 48
    364c:	8c 93       	st	X, r24
				u8PressedLoc = 0xFF;
    364e:	fe 01       	movw	r30, r28
    3650:	ee 5a       	subi	r30, 0xAE	; 174
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	8f ef       	ldi	r24, 0xFF	; 255
    3656:	80 83       	st	Z, r24
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	a8 ec       	ldi	r26, 0xC8	; 200
    365e:	b2 e4       	ldi	r27, 0x42	; 66
    3660:	8d ab       	std	Y+53, r24	; 0x35
    3662:	9e ab       	std	Y+54, r25	; 0x36
    3664:	af ab       	std	Y+55, r26	; 0x37
    3666:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3668:	6d a9       	ldd	r22, Y+53	; 0x35
    366a:	7e a9       	ldd	r23, Y+54	; 0x36
    366c:	8f a9       	ldd	r24, Y+55	; 0x37
    366e:	98 ad       	ldd	r25, Y+56	; 0x38
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	4a ef       	ldi	r20, 0xFA	; 250
    3676:	54 e4       	ldi	r21, 0x44	; 68
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	89 ab       	std	Y+49, r24	; 0x31
    3682:	9a ab       	std	Y+50, r25	; 0x32
    3684:	ab ab       	std	Y+51, r26	; 0x33
    3686:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3688:	69 a9       	ldd	r22, Y+49	; 0x31
    368a:	7a a9       	ldd	r23, Y+50	; 0x32
    368c:	8b a9       	ldd	r24, Y+51	; 0x33
    368e:	9c a9       	ldd	r25, Y+52	; 0x34
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	40 e8       	ldi	r20, 0x80	; 128
    3696:	5f e3       	ldi	r21, 0x3F	; 63
    3698:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    369c:	88 23       	and	r24, r24
    369e:	2c f4       	brge	.+10     	; 0x36aa <main+0x286>
		__ticks = 1;
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	98 ab       	std	Y+48, r25	; 0x30
    36a6:	8f a7       	std	Y+47, r24	; 0x2f
    36a8:	3f c0       	rjmp	.+126    	; 0x3728 <main+0x304>
	else if (__tmp > 65535)
    36aa:	69 a9       	ldd	r22, Y+49	; 0x31
    36ac:	7a a9       	ldd	r23, Y+50	; 0x32
    36ae:	8b a9       	ldd	r24, Y+51	; 0x33
    36b0:	9c a9       	ldd	r25, Y+52	; 0x34
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	3f ef       	ldi	r19, 0xFF	; 255
    36b6:	4f e7       	ldi	r20, 0x7F	; 127
    36b8:	57 e4       	ldi	r21, 0x47	; 71
    36ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36be:	18 16       	cp	r1, r24
    36c0:	4c f5       	brge	.+82     	; 0x3714 <main+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c2:	6d a9       	ldd	r22, Y+53	; 0x35
    36c4:	7e a9       	ldd	r23, Y+54	; 0x36
    36c6:	8f a9       	ldd	r24, Y+55	; 0x37
    36c8:	98 ad       	ldd	r25, Y+56	; 0x38
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e2       	ldi	r20, 0x20	; 32
    36d0:	51 e4       	ldi	r21, 0x41	; 65
    36d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	bc 01       	movw	r22, r24
    36dc:	cd 01       	movw	r24, r26
    36de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	98 ab       	std	Y+48, r25	; 0x30
    36e8:	8f a7       	std	Y+47, r24	; 0x2f
    36ea:	0f c0       	rjmp	.+30     	; 0x370a <main+0x2e6>
    36ec:	88 ec       	ldi	r24, 0xC8	; 200
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	9e a7       	std	Y+46, r25	; 0x2e
    36f2:	8d a7       	std	Y+45, r24	; 0x2d
    36f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    36f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	f1 f7       	brne	.-4      	; 0x36f8 <main+0x2d4>
    36fc:	9e a7       	std	Y+46, r25	; 0x2e
    36fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3700:	8f a5       	ldd	r24, Y+47	; 0x2f
    3702:	98 a9       	ldd	r25, Y+48	; 0x30
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	98 ab       	std	Y+48, r25	; 0x30
    3708:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370a:	8f a5       	ldd	r24, Y+47	; 0x2f
    370c:	98 a9       	ldd	r25, Y+48	; 0x30
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	69 f7       	brne	.-38     	; 0x36ec <main+0x2c8>
    3712:	14 c0       	rjmp	.+40     	; 0x373c <main+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3714:	69 a9       	ldd	r22, Y+49	; 0x31
    3716:	7a a9       	ldd	r23, Y+50	; 0x32
    3718:	8b a9       	ldd	r24, Y+51	; 0x33
    371a:	9c a9       	ldd	r25, Y+52	; 0x34
    371c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	98 ab       	std	Y+48, r25	; 0x30
    3726:	8f a7       	std	Y+47, r24	; 0x2f
    3728:	8f a5       	ldd	r24, Y+47	; 0x2f
    372a:	98 a9       	ldd	r25, Y+48	; 0x30
    372c:	9c a7       	std	Y+44, r25	; 0x2c
    372e:	8b a7       	std	Y+43, r24	; 0x2b
    3730:	8b a5       	ldd	r24, Y+43	; 0x2b
    3732:	9c a5       	ldd	r25, Y+44	; 0x2c
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <main+0x310>
    3738:	9c a7       	std	Y+44, r25	; 0x2c
    373a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(100);
				break;
			}
		}
		while (1) {
			u8PressedLoc = KEYPAD_u8GetPressedKey(0);
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	0e 94 b6 0a 	call	0x156c	; 0x156c <KEYPAD_u8GetPressedKey>
    3742:	fe 01       	movw	r30, r28
    3744:	ee 5a       	subi	r30, 0xAE	; 174
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	80 83       	st	Z, r24

			if (u8PressedLoc != 0xFF) {
    374a:	fe 01       	movw	r30, r28
    374c:	ee 5a       	subi	r30, 0xAE	; 174
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 81       	ld	r24, Z
    3752:	8f 3f       	cpi	r24, 0xFF	; 255
    3754:	99 f3       	breq	.-26     	; 0x373c <main+0x318>
				LCD_voidDisplayChar(0, u8PressedLoc);
    3756:	fe 01       	movw	r30, r28
    3758:	ee 5a       	subi	r30, 0xAE	; 174
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	60 81       	ld	r22, Z
    3760:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <LCD_voidDisplayChar>
				ones = u8PressedLoc - 48;
    3764:	de 01       	movw	r26, r28
    3766:	a8 5b       	subi	r26, 0xB8	; 184
    3768:	bf 4f       	sbci	r27, 0xFF	; 255
    376a:	fe 01       	movw	r30, r28
    376c:	ee 5a       	subi	r30, 0xAE	; 174
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	80 81       	ld	r24, Z
    3772:	80 53       	subi	r24, 0x30	; 48
    3774:	8c 93       	st	X, r24
				u8PressedLoc = 0xFF;
    3776:	fe 01       	movw	r30, r28
    3778:	ee 5a       	subi	r30, 0xAE	; 174
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	8f ef       	ldi	r24, 0xFF	; 255
    377e:	80 83       	st	Z, r24
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	a8 ec       	ldi	r26, 0xC8	; 200
    3786:	b2 e4       	ldi	r27, 0x42	; 66
    3788:	8f a3       	std	Y+39, r24	; 0x27
    378a:	98 a7       	std	Y+40, r25	; 0x28
    378c:	a9 a7       	std	Y+41, r26	; 0x29
    378e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3790:	6f a1       	ldd	r22, Y+39	; 0x27
    3792:	78 a5       	ldd	r23, Y+40	; 0x28
    3794:	89 a5       	ldd	r24, Y+41	; 0x29
    3796:	9a a5       	ldd	r25, Y+42	; 0x2a
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	4a ef       	ldi	r20, 0xFA	; 250
    379e:	54 e4       	ldi	r21, 0x44	; 68
    37a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	8b a3       	std	Y+35, r24	; 0x23
    37aa:	9c a3       	std	Y+36, r25	; 0x24
    37ac:	ad a3       	std	Y+37, r26	; 0x25
    37ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37b0:	6b a1       	ldd	r22, Y+35	; 0x23
    37b2:	7c a1       	ldd	r23, Y+36	; 0x24
    37b4:	8d a1       	ldd	r24, Y+37	; 0x25
    37b6:	9e a1       	ldd	r25, Y+38	; 0x26
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e8       	ldi	r20, 0x80	; 128
    37be:	5f e3       	ldi	r21, 0x3F	; 63
    37c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37c4:	88 23       	and	r24, r24
    37c6:	2c f4       	brge	.+10     	; 0x37d2 <main+0x3ae>
		__ticks = 1;
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	9a a3       	std	Y+34, r25	; 0x22
    37ce:	89 a3       	std	Y+33, r24	; 0x21
    37d0:	3f c0       	rjmp	.+126    	; 0x3850 <main+0x42c>
	else if (__tmp > 65535)
    37d2:	6b a1       	ldd	r22, Y+35	; 0x23
    37d4:	7c a1       	ldd	r23, Y+36	; 0x24
    37d6:	8d a1       	ldd	r24, Y+37	; 0x25
    37d8:	9e a1       	ldd	r25, Y+38	; 0x26
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	3f ef       	ldi	r19, 0xFF	; 255
    37de:	4f e7       	ldi	r20, 0x7F	; 127
    37e0:	57 e4       	ldi	r21, 0x47	; 71
    37e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37e6:	18 16       	cp	r1, r24
    37e8:	4c f5       	brge	.+82     	; 0x383c <main+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ea:	6f a1       	ldd	r22, Y+39	; 0x27
    37ec:	78 a5       	ldd	r23, Y+40	; 0x28
    37ee:	89 a5       	ldd	r24, Y+41	; 0x29
    37f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	40 e2       	ldi	r20, 0x20	; 32
    37f8:	51 e4       	ldi	r21, 0x41	; 65
    37fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	bc 01       	movw	r22, r24
    3804:	cd 01       	movw	r24, r26
    3806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	9a a3       	std	Y+34, r25	; 0x22
    3810:	89 a3       	std	Y+33, r24	; 0x21
    3812:	0f c0       	rjmp	.+30     	; 0x3832 <main+0x40e>
    3814:	88 ec       	ldi	r24, 0xC8	; 200
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	98 a3       	std	Y+32, r25	; 0x20
    381a:	8f 8f       	std	Y+31, r24	; 0x1f
    381c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    381e:	98 a1       	ldd	r25, Y+32	; 0x20
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	f1 f7       	brne	.-4      	; 0x3820 <main+0x3fc>
    3824:	98 a3       	std	Y+32, r25	; 0x20
    3826:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3828:	89 a1       	ldd	r24, Y+33	; 0x21
    382a:	9a a1       	ldd	r25, Y+34	; 0x22
    382c:	01 97       	sbiw	r24, 0x01	; 1
    382e:	9a a3       	std	Y+34, r25	; 0x22
    3830:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3832:	89 a1       	ldd	r24, Y+33	; 0x21
    3834:	9a a1       	ldd	r25, Y+34	; 0x22
    3836:	00 97       	sbiw	r24, 0x00	; 0
    3838:	69 f7       	brne	.-38     	; 0x3814 <main+0x3f0>
    383a:	14 c0       	rjmp	.+40     	; 0x3864 <main+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383c:	6b a1       	ldd	r22, Y+35	; 0x23
    383e:	7c a1       	ldd	r23, Y+36	; 0x24
    3840:	8d a1       	ldd	r24, Y+37	; 0x25
    3842:	9e a1       	ldd	r25, Y+38	; 0x26
    3844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	9a a3       	std	Y+34, r25	; 0x22
    384e:	89 a3       	std	Y+33, r24	; 0x21
    3850:	89 a1       	ldd	r24, Y+33	; 0x21
    3852:	9a a1       	ldd	r25, Y+34	; 0x22
    3854:	9e 8f       	std	Y+30, r25	; 0x1e
    3856:	8d 8f       	std	Y+29, r24	; 0x1d
    3858:	8d 8d       	ldd	r24, Y+29	; 0x1d
    385a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    385c:	01 97       	sbiw	r24, 0x01	; 1
    385e:	f1 f7       	brne	.-4      	; 0x385c <main+0x438>
    3860:	9e 8f       	std	Y+30, r25	; 0x1e
    3862:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(100);
				break;
			}

		}
		if ((ones == 0) && (tens == 0) && (hundreds == 0)) {
    3864:	fe 01       	movw	r30, r28
    3866:	e8 5b       	subi	r30, 0xB8	; 184
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	80 81       	ld	r24, Z
    386c:	88 23       	and	r24, r24
    386e:	09 f0       	breq	.+2      	; 0x3872 <main+0x44e>
    3870:	58 c0       	rjmp	.+176    	; 0x3922 <main+0x4fe>
				u8PressedLoc = 0xFF;
				_delay_ms(100);
				break;
			}

		}
    3872:	fe 01       	movw	r30, r28
    3874:	e7 5b       	subi	r30, 0xB7	; 183
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	80 81       	ld	r24, Z
    387a:	88 23       	and	r24, r24
    387c:	09 f0       	breq	.+2      	; 0x3880 <main+0x45c>
    387e:	51 c0       	rjmp	.+162    	; 0x3922 <main+0x4fe>
		if ((ones == 0) && (tens == 0) && (hundreds == 0)) {
    3880:	fe 01       	movw	r30, r28
    3882:	e6 5b       	subi	r30, 0xB6	; 182
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	80 81       	ld	r24, Z
    3888:	88 23       	and	r24, r24
    388a:	09 f0       	breq	.+2      	; 0x388e <main+0x46a>
    388c:	4a c0       	rjmp	.+148    	; 0x3922 <main+0x4fe>
			LCD_voidWriteCmd(0, 0x01);
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	61 e0       	ldi	r22, 0x01	; 1
    3892:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
			LCD_voidDisplayString(0, "1: for Heating");
    3896:	2d e6       	ldi	r18, 0x6D	; 109
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	b9 01       	movw	r22, r18
    389e:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>
			LCD_voidWriteCmd(0, 0xC0);
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	60 ec       	ldi	r22, 0xC0	; 192
    38a6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
			LCD_voidDisplayString(0, "2: for Cooling");
    38aa:	2c e7       	ldi	r18, 0x7C	; 124
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	b9 01       	movw	r22, r18
    38b2:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>

			while (1) {
				u8PressedLoc = KEYPAD_u8GetPressedKey(0);
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	0e 94 b6 0a 	call	0x156c	; 0x156c <KEYPAD_u8GetPressedKey>
    38bc:	fe 01       	movw	r30, r28
    38be:	ee 5a       	subi	r30, 0xAE	; 174
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 83       	st	Z, r24

				if (u8PressedLoc != 0xFF) {
    38c4:	fe 01       	movw	r30, r28
    38c6:	ee 5a       	subi	r30, 0xAE	; 174
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 81       	ld	r24, Z
    38cc:	8f 3f       	cpi	r24, 0xFF	; 255
    38ce:	99 f3       	breq	.-26     	; 0x38b6 <main+0x492>
					if (u8PressedLoc == '1') {
    38d0:	fe 01       	movw	r30, r28
    38d2:	ee 5a       	subi	r30, 0xAE	; 174
    38d4:	ff 4f       	sbci	r31, 0xFF	; 255
    38d6:	80 81       	ld	r24, Z
    38d8:	81 33       	cpi	r24, 0x31	; 49
    38da:	49 f4       	brne	.+18     	; 0x38ee <main+0x4ca>
						u8ControllerState = 1;
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	80 93 fe 01 	sts	0x01FE, r24
						EEPROM_voidWriteByte(1, 0);
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	60 e0       	ldi	r22, 0x00	; 0
    38e6:	70 e0       	ldi	r23, 0x00	; 0
    38e8:	0e 94 de 09 	call	0x13bc	; 0x13bc <EEPROM_voidWriteByte>
    38ec:	de cd       	rjmp	.-1092   	; 0x34aa <main+0x86>
						break;

					} else if (u8PressedLoc == '2') {
    38ee:	fe 01       	movw	r30, r28
    38f0:	ee 5a       	subi	r30, 0xAE	; 174
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	80 81       	ld	r24, Z
    38f6:	82 33       	cpi	r24, 0x32	; 50
    38f8:	49 f4       	brne	.+18     	; 0x390c <main+0x4e8>
						u8ControllerState = 2;
    38fa:	82 e0       	ldi	r24, 0x02	; 2
    38fc:	80 93 fe 01 	sts	0x01FE, r24
						EEPROM_voidWriteByte(2, 0);
    3900:	82 e0       	ldi	r24, 0x02	; 2
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	70 e0       	ldi	r23, 0x00	; 0
    3906:	0e 94 de 09 	call	0x13bc	; 0x13bc <EEPROM_voidWriteByte>
    390a:	cf cd       	rjmp	.-1122   	; 0x34aa <main+0x86>
						break;

					} else {
						LCD_voidWriteCmd(0, 0x01);
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	61 e0       	ldi	r22, 0x01	; 1
    3910:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
						LCD_voidDisplayString(0, "Wrong choice");
    3914:	2b e8       	ldi	r18, 0x8B	; 139
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	b9 01       	movw	r22, r18
    391c:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>
    3920:	ca cf       	rjmp	.-108    	; 0x38b6 <main+0x492>
			}

		} else {

			while (1) {
				Loc_s16_ADCDigitalValue = ADC_u16ReadSync(ADC_CHANNEL_DIFF_0_1);
    3922:	80 e1       	ldi	r24, 0x10	; 16
    3924:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ADC_u16ReadSync>
    3928:	fe 01       	movw	r30, r28
    392a:	e2 5b       	subi	r30, 0xB2	; 178
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	91 83       	std	Z+1, r25	; 0x01
    3930:	80 83       	st	Z, r24
				Local_s8AnalogValue = (((float32) (0.4889)* Loc_s16_ADCDigitalValue));
    3932:	fe 01       	movw	r30, r28
    3934:	e2 5b       	subi	r30, 0xB2	; 178
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	80 81       	ld	r24, Z
    393a:	91 81       	ldd	r25, Z+1	; 0x01
    393c:	cc 01       	movw	r24, r24
    393e:	a0 e0       	ldi	r26, 0x00	; 0
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	bc 01       	movw	r22, r24
    3944:	cd 01       	movw	r24, r26
    3946:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	bc 01       	movw	r22, r24
    3950:	cd 01       	movw	r24, r26
    3952:	2a e1       	ldi	r18, 0x1A	; 26
    3954:	31 e5       	ldi	r19, 0x51	; 81
    3956:	4a ef       	ldi	r20, 0xFA	; 250
    3958:	5e e3       	ldi	r21, 0x3E	; 62
    395a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	8e 01       	movw	r16, r28
    3964:	05 5b       	subi	r16, 0xB5	; 181
    3966:	1f 4f       	sbci	r17, 0xFF	; 255
    3968:	bc 01       	movw	r22, r24
    396a:	cd 01       	movw	r24, r26
    396c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	f8 01       	movw	r30, r16
    3976:	80 83       	st	Z, r24

				if ((hundreds <= 1) && (Calc_flag == 0)) {
    3978:	fe 01       	movw	r30, r28
    397a:	e6 5b       	subi	r30, 0xB6	; 182
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	80 81       	ld	r24, Z
    3980:	82 30       	cpi	r24, 0x02	; 2
    3982:	e0 f5       	brcc	.+120    	; 0x39fc <main+0x5d8>
    3984:	fe 01       	movw	r30, r28
    3986:	ef 5a       	subi	r30, 0xAF	; 175
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	80 81       	ld	r24, Z
    398c:	88 23       	and	r24, r24
    398e:	b1 f5       	brne	.+108    	; 0x39fc <main+0x5d8>
					InputTemp = (hundreds * 100) + (tens * 10) + (ones * 1);
    3990:	fe 01       	movw	r30, r28
    3992:	e6 5b       	subi	r30, 0xB6	; 182
    3994:	ff 4f       	sbci	r31, 0xFF	; 255
    3996:	80 81       	ld	r24, Z
    3998:	28 2f       	mov	r18, r24
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	84 e6       	ldi	r24, 0x64	; 100
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	ac 01       	movw	r20, r24
    39a2:	24 9f       	mul	r18, r20
    39a4:	c0 01       	movw	r24, r0
    39a6:	25 9f       	mul	r18, r21
    39a8:	90 0d       	add	r25, r0
    39aa:	34 9f       	mul	r19, r20
    39ac:	90 0d       	add	r25, r0
    39ae:	11 24       	eor	r1, r1
    39b0:	48 2f       	mov	r20, r24
    39b2:	fe 01       	movw	r30, r28
    39b4:	e7 5b       	subi	r30, 0xB7	; 183
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	80 81       	ld	r24, Z
    39ba:	88 2f       	mov	r24, r24
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	9c 01       	movw	r18, r24
    39c0:	22 0f       	add	r18, r18
    39c2:	33 1f       	adc	r19, r19
    39c4:	c9 01       	movw	r24, r18
    39c6:	88 0f       	add	r24, r24
    39c8:	99 1f       	adc	r25, r25
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	82 0f       	add	r24, r18
    39d0:	93 1f       	adc	r25, r19
    39d2:	94 2f       	mov	r25, r20
    39d4:	98 0f       	add	r25, r24
    39d6:	de 01       	movw	r26, r28
    39d8:	a9 5b       	subi	r26, 0xB9	; 185
    39da:	bf 4f       	sbci	r27, 0xFF	; 255
    39dc:	fe 01       	movw	r30, r28
    39de:	e8 5b       	subi	r30, 0xB8	; 184
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	89 0f       	add	r24, r25
    39e6:	8c 93       	st	X, r24
					Calc_flag = 1;
    39e8:	fe 01       	movw	r30, r28
    39ea:	ef 5a       	subi	r30, 0xAF	; 175
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	80 83       	st	Z, r24
					LCD_voidWriteCmd(0, 0x01);
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	61 e0       	ldi	r22, 0x01	; 1
    39f6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
    39fa:	8b c0       	rjmp	.+278    	; 0x3b12 <main+0x6ee>

				} else if ((hundreds > 1) && (Calc_flag == 0)) {
    39fc:	fe 01       	movw	r30, r28
    39fe:	e6 5b       	subi	r30, 0xB6	; 182
    3a00:	ff 4f       	sbci	r31, 0xFF	; 255
    3a02:	80 81       	ld	r24, Z
    3a04:	82 30       	cpi	r24, 0x02	; 2
    3a06:	08 f4       	brcc	.+2      	; 0x3a0a <main+0x5e6>
    3a08:	84 c0       	rjmp	.+264    	; 0x3b12 <main+0x6ee>
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	ef 5a       	subi	r30, 0xAF	; 175
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	80 81       	ld	r24, Z
    3a12:	88 23       	and	r24, r24
    3a14:	09 f0       	breq	.+2      	; 0x3a18 <main+0x5f4>
    3a16:	7d c0       	rjmp	.+250    	; 0x3b12 <main+0x6ee>
					LCD_voidWriteCmd(0, 0x01);
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	61 e0       	ldi	r22, 0x01	; 1
    3a1c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
					LCD_voidDisplayString(0, "Invalid Value");
    3a20:	28 e9       	ldi	r18, 0x98	; 152
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	b9 01       	movw	r22, r18
    3a28:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	aa ef       	ldi	r26, 0xFA	; 250
    3a32:	b4 e4       	ldi	r27, 0x44	; 68
    3a34:	89 8f       	std	Y+25, r24	; 0x19
    3a36:	9a 8f       	std	Y+26, r25	; 0x1a
    3a38:	ab 8f       	std	Y+27, r26	; 0x1b
    3a3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	4a ef       	ldi	r20, 0xFA	; 250
    3a4a:	54 e4       	ldi	r21, 0x44	; 68
    3a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	8d 8b       	std	Y+21, r24	; 0x15
    3a56:	9e 8b       	std	Y+22, r25	; 0x16
    3a58:	af 8b       	std	Y+23, r26	; 0x17
    3a5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a60:	8f 89       	ldd	r24, Y+23	; 0x17
    3a62:	98 8d       	ldd	r25, Y+24	; 0x18
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	40 e8       	ldi	r20, 0x80	; 128
    3a6a:	5f e3       	ldi	r21, 0x3F	; 63
    3a6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a70:	88 23       	and	r24, r24
    3a72:	2c f4       	brge	.+10     	; 0x3a7e <main+0x65a>
		__ticks = 1;
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	9c 8b       	std	Y+20, r25	; 0x14
    3a7a:	8b 8b       	std	Y+19, r24	; 0x13
    3a7c:	3f c0       	rjmp	.+126    	; 0x3afc <main+0x6d8>
	else if (__tmp > 65535)
    3a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a80:	7e 89       	ldd	r23, Y+22	; 0x16
    3a82:	8f 89       	ldd	r24, Y+23	; 0x17
    3a84:	98 8d       	ldd	r25, Y+24	; 0x18
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	3f ef       	ldi	r19, 0xFF	; 255
    3a8a:	4f e7       	ldi	r20, 0x7F	; 127
    3a8c:	57 e4       	ldi	r21, 0x47	; 71
    3a8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a92:	18 16       	cp	r1, r24
    3a94:	4c f5       	brge	.+82     	; 0x3ae8 <main+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a96:	69 8d       	ldd	r22, Y+25	; 0x19
    3a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	40 e2       	ldi	r20, 0x20	; 32
    3aa4:	51 e4       	ldi	r21, 0x41	; 65
    3aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	bc 01       	movw	r22, r24
    3ab0:	cd 01       	movw	r24, r26
    3ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	9c 8b       	std	Y+20, r25	; 0x14
    3abc:	8b 8b       	std	Y+19, r24	; 0x13
    3abe:	0f c0       	rjmp	.+30     	; 0x3ade <main+0x6ba>
    3ac0:	88 ec       	ldi	r24, 0xC8	; 200
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	9a 8b       	std	Y+18, r25	; 0x12
    3ac6:	89 8b       	std	Y+17, r24	; 0x11
    3ac8:	89 89       	ldd	r24, Y+17	; 0x11
    3aca:	9a 89       	ldd	r25, Y+18	; 0x12
    3acc:	01 97       	sbiw	r24, 0x01	; 1
    3ace:	f1 f7       	brne	.-4      	; 0x3acc <main+0x6a8>
    3ad0:	9a 8b       	std	Y+18, r25	; 0x12
    3ad2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	9c 8b       	std	Y+20, r25	; 0x14
    3adc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ade:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae2:	00 97       	sbiw	r24, 0x00	; 0
    3ae4:	69 f7       	brne	.-38     	; 0x3ac0 <main+0x69c>
    3ae6:	d0 c0       	rjmp	.+416    	; 0x3c88 <main+0x864>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    3aea:	7e 89       	ldd	r23, Y+22	; 0x16
    3aec:	8f 89       	ldd	r24, Y+23	; 0x17
    3aee:	98 8d       	ldd	r25, Y+24	; 0x18
    3af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	9c 8b       	std	Y+20, r25	; 0x14
    3afa:	8b 8b       	std	Y+19, r24	; 0x13
    3afc:	8b 89       	ldd	r24, Y+19	; 0x13
    3afe:	9c 89       	ldd	r25, Y+20	; 0x14
    3b00:	98 8b       	std	Y+16, r25	; 0x10
    3b02:	8f 87       	std	Y+15, r24	; 0x0f
    3b04:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b06:	98 89       	ldd	r25, Y+16	; 0x10
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <main+0x6e4>
    3b0c:	98 8b       	std	Y+16, r25	; 0x10
    3b0e:	8f 87       	std	Y+15, r24	; 0x0f
    3b10:	bb c0       	rjmp	.+374    	; 0x3c88 <main+0x864>
					_delay_ms(2000);
					break;
				}

				if (EEPROM_u8ReadByte(0) == 1) {
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	0e 94 0a 0a 	call	0x1414	; 0x1414 <EEPROM_u8ReadByte>
    3b1a:	81 30       	cpi	r24, 0x01	; 1
    3b1c:	41 f5       	brne	.+80     	; 0x3b6e <main+0x74a>
					if (InputTemp > Local_s8AnalogValue) {
    3b1e:	fe 01       	movw	r30, r28
    3b20:	e9 5b       	subi	r30, 0xB9	; 185
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	de 01       	movw	r26, r28
    3b26:	a5 5b       	subi	r26, 0xB5	; 181
    3b28:	bf 4f       	sbci	r27, 0xFF	; 255
    3b2a:	90 81       	ld	r25, Z
    3b2c:	8c 91       	ld	r24, X
    3b2e:	89 17       	cp	r24, r25
    3b30:	78 f4       	brcc	.+30     	; 0x3b50 <main+0x72c>
						LCD_voidWriteCmd(0, 0x01);
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	61 e0       	ldi	r22, 0x01	; 1
    3b36:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
						DIO_enuWritePin(DIO_PIN_NUM_8, DIO_HIGH);
    3b3a:	88 e0       	ldi	r24, 0x08	; 8
    3b3c:	61 e0       	ldi	r22, 0x01	; 1
    3b3e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
						LCD_voidDisplayString(0, "Heater ON");
    3b42:	26 ea       	ldi	r18, 0xA6	; 166
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	b9 01       	movw	r22, r18
    3b4a:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>
    3b4e:	64 c0       	rjmp	.+200    	; 0x3c18 <main+0x7f4>
					} else {
						LCD_voidWriteCmd(0, 0x01);
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	61 e0       	ldi	r22, 0x01	; 1
    3b54:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
						DIO_enuWritePin(DIO_PIN_NUM_8, DIO_LOW);
    3b58:	88 e0       	ldi	r24, 0x08	; 8
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
						LCD_voidDisplayString(0, "Heater OFF");
    3b60:	20 eb       	ldi	r18, 0xB0	; 176
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	b9 01       	movw	r22, r18
    3b68:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>
    3b6c:	55 c0       	rjmp	.+170    	; 0x3c18 <main+0x7f4>

					}
				} else if (EEPROM_u8ReadByte(0) == 2) {
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	0e 94 0a 0a 	call	0x1414	; 0x1414 <EEPROM_u8ReadByte>
    3b76:	82 30       	cpi	r24, 0x02	; 2
    3b78:	41 f5       	brne	.+80     	; 0x3bca <main+0x7a6>
					if (InputTemp < Local_s8AnalogValue) {
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	e9 5b       	subi	r30, 0xB9	; 185
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	de 01       	movw	r26, r28
    3b82:	a5 5b       	subi	r26, 0xB5	; 181
    3b84:	bf 4f       	sbci	r27, 0xFF	; 255
    3b86:	90 81       	ld	r25, Z
    3b88:	8c 91       	ld	r24, X
    3b8a:	98 17       	cp	r25, r24
    3b8c:	78 f4       	brcc	.+30     	; 0x3bac <main+0x788>
						LCD_voidWriteCmd(0, 0x01);
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	61 e0       	ldi	r22, 0x01	; 1
    3b92:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
						DIO_enuWritePin(DIO_PIN_NUM_8, DIO_HIGH);
    3b96:	88 e0       	ldi	r24, 0x08	; 8
    3b98:	61 e0       	ldi	r22, 0x01	; 1
    3b9a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
						LCD_voidDisplayString(0, "Cooler ON");
    3b9e:	2b eb       	ldi	r18, 0xBB	; 187
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	b9 01       	movw	r22, r18
    3ba6:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>
    3baa:	36 c0       	rjmp	.+108    	; 0x3c18 <main+0x7f4>
					} else {
						LCD_voidWriteCmd(0, 0x01);
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	61 e0       	ldi	r22, 0x01	; 1
    3bb0:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
						DIO_enuWritePin(DIO_PIN_NUM_8, DIO_LOW);
    3bb4:	88 e0       	ldi	r24, 0x08	; 8
    3bb6:	60 e0       	ldi	r22, 0x00	; 0
    3bb8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
						LCD_voidDisplayString(0, "Cooler OFF");
    3bbc:	25 ec       	ldi	r18, 0xC5	; 197
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	b9 01       	movw	r22, r18
    3bc4:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>
    3bc8:	27 c0       	rjmp	.+78     	; 0x3c18 <main+0x7f4>

					}
				}
				else {
					if (InputTemp > Local_s8AnalogValue) {
    3bca:	fe 01       	movw	r30, r28
    3bcc:	e9 5b       	subi	r30, 0xB9	; 185
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	de 01       	movw	r26, r28
    3bd2:	a5 5b       	subi	r26, 0xB5	; 181
    3bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    3bd6:	90 81       	ld	r25, Z
    3bd8:	8c 91       	ld	r24, X
    3bda:	89 17       	cp	r24, r25
    3bdc:	78 f4       	brcc	.+30     	; 0x3bfc <main+0x7d8>
						LCD_voidWriteCmd(0, 0x01);
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	61 e0       	ldi	r22, 0x01	; 1
    3be2:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
						DIO_enuWritePin(DIO_PIN_NUM_8, DIO_HIGH);
    3be6:	88 e0       	ldi	r24, 0x08	; 8
    3be8:	61 e0       	ldi	r22, 0x01	; 1
    3bea:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
						LCD_voidDisplayString(0, "Heater ON");
    3bee:	26 ea       	ldi	r18, 0xA6	; 166
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	b9 01       	movw	r22, r18
    3bf6:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>
    3bfa:	0e c0       	rjmp	.+28     	; 0x3c18 <main+0x7f4>
					} else {
						LCD_voidWriteCmd(0, 0x01);
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	61 e0       	ldi	r22, 0x01	; 1
    3c00:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <LCD_voidWriteCmd>
						DIO_enuWritePin(DIO_PIN_NUM_8, DIO_LOW);
    3c04:	88 e0       	ldi	r24, 0x08	; 8
    3c06:	60 e0       	ldi	r22, 0x00	; 0
    3c08:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_enuWritePin>
						LCD_voidDisplayString(0, "Heater OFF");
    3c0c:	20 eb       	ldi	r18, 0xB0	; 176
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	b9 01       	movw	r22, r18
    3c14:	0e 94 de 19 	call	0x33bc	; 0x33bc <LCD_voidDisplayString>
					}

				}
				//_delay_ms(500);

				for(i=0;i<10;i++)
    3c18:	fe 01       	movw	r30, r28
    3c1a:	e4 5b       	subi	r30, 0xB4	; 180
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	11 82       	std	Z+1, r1	; 0x01
    3c20:	10 82       	st	Z, r1
    3c22:	1f c0       	rjmp	.+62     	; 0x3c62 <main+0x83e>
				{
					u8PressedLoc = KEYPAD_u8GetPressedKey(0);
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	0e 94 b6 0a 	call	0x156c	; 0x156c <KEYPAD_u8GetPressedKey>
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	ee 5a       	subi	r30, 0xAE	; 174
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	80 83       	st	Z, r24
					if(u8PressedLoc!=0xFF)
    3c32:	fe 01       	movw	r30, r28
    3c34:	ee 5a       	subi	r30, 0xAE	; 174
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	80 81       	ld	r24, Z
    3c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    3c3c:	31 f0       	breq	.+12     	; 0x3c4a <main+0x826>
					{
						GetOut_flag=1;
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e0 5b       	subi	r30, 0xB0	; 176
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	80 83       	st	Z, r24
    3c48:	14 c0       	rjmp	.+40     	; 0x3c72 <main+0x84e>
					}

				}
				//_delay_ms(500);

				for(i=0;i<10;i++)
    3c4a:	de 01       	movw	r26, r28
    3c4c:	a4 5b       	subi	r26, 0xB4	; 180
    3c4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c50:	fe 01       	movw	r30, r28
    3c52:	e4 5b       	subi	r30, 0xB4	; 180
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	80 81       	ld	r24, Z
    3c58:	91 81       	ldd	r25, Z+1	; 0x01
    3c5a:	01 96       	adiw	r24, 0x01	; 1
    3c5c:	11 96       	adiw	r26, 0x01	; 1
    3c5e:	9c 93       	st	X, r25
    3c60:	8e 93       	st	-X, r24
    3c62:	fe 01       	movw	r30, r28
    3c64:	e4 5b       	subi	r30, 0xB4	; 180
    3c66:	ff 4f       	sbci	r31, 0xFF	; 255
    3c68:	80 81       	ld	r24, Z
    3c6a:	91 81       	ldd	r25, Z+1	; 0x01
    3c6c:	8a 30       	cpi	r24, 0x0A	; 10
    3c6e:	91 05       	cpc	r25, r1
    3c70:	c8 f2       	brcs	.-78     	; 0x3c24 <main+0x800>
					{
						GetOut_flag=1;
						break;
					}
				}
				if (GetOut_flag == 1) {
    3c72:	fe 01       	movw	r30, r28
    3c74:	e0 5b       	subi	r30, 0xB0	; 176
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	80 81       	ld	r24, Z
    3c7a:	81 30       	cpi	r24, 0x01	; 1
    3c7c:	09 f0       	breq	.+2      	; 0x3c80 <main+0x85c>
    3c7e:	51 ce       	rjmp	.-862    	; 0x3922 <main+0x4fe>
					GetOut_flag = 0;
    3c80:	fe 01       	movw	r30, r28
    3c82:	e0 5b       	subi	r30, 0xB0	; 176
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	10 82       	st	Z, r1
					break;
				}


			}
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	aa ef       	ldi	r26, 0xFA	; 250
    3c8e:	b3 e4       	ldi	r27, 0x43	; 67
    3c90:	8b 87       	std	Y+11, r24	; 0x0b
    3c92:	9c 87       	std	Y+12, r25	; 0x0c
    3c94:	ad 87       	std	Y+13, r26	; 0x0d
    3c96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	4a ef       	ldi	r20, 0xFA	; 250
    3ca6:	54 e4       	ldi	r21, 0x44	; 68
    3ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	8f 83       	std	Y+7, r24	; 0x07
    3cb2:	98 87       	std	Y+8, r25	; 0x08
    3cb4:	a9 87       	std	Y+9, r26	; 0x09
    3cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cba:	78 85       	ldd	r23, Y+8	; 0x08
    3cbc:	89 85       	ldd	r24, Y+9	; 0x09
    3cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e8       	ldi	r20, 0x80	; 128
    3cc6:	5f e3       	ldi	r21, 0x3F	; 63
    3cc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ccc:	88 23       	and	r24, r24
    3cce:	2c f4       	brge	.+10     	; 0x3cda <main+0x8b6>
		__ticks = 1;
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	9e 83       	std	Y+6, r25	; 0x06
    3cd6:	8d 83       	std	Y+5, r24	; 0x05
    3cd8:	3f c0       	rjmp	.+126    	; 0x3d58 <main+0x934>
	else if (__tmp > 65535)
    3cda:	6f 81       	ldd	r22, Y+7	; 0x07
    3cdc:	78 85       	ldd	r23, Y+8	; 0x08
    3cde:	89 85       	ldd	r24, Y+9	; 0x09
    3ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	3f ef       	ldi	r19, 0xFF	; 255
    3ce6:	4f e7       	ldi	r20, 0x7F	; 127
    3ce8:	57 e4       	ldi	r21, 0x47	; 71
    3cea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cee:	18 16       	cp	r1, r24
    3cf0:	4c f5       	brge	.+82     	; 0x3d44 <main+0x920>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	40 e2       	ldi	r20, 0x20	; 32
    3d00:	51 e4       	ldi	r21, 0x41	; 65
    3d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	bc 01       	movw	r22, r24
    3d0c:	cd 01       	movw	r24, r26
    3d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	9e 83       	std	Y+6, r25	; 0x06
    3d18:	8d 83       	std	Y+5, r24	; 0x05
    3d1a:	0f c0       	rjmp	.+30     	; 0x3d3a <main+0x916>
    3d1c:	88 ec       	ldi	r24, 0xC8	; 200
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	9c 83       	std	Y+4, r25	; 0x04
    3d22:	8b 83       	std	Y+3, r24	; 0x03
    3d24:	8b 81       	ldd	r24, Y+3	; 0x03
    3d26:	9c 81       	ldd	r25, Y+4	; 0x04
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	f1 f7       	brne	.-4      	; 0x3d28 <main+0x904>
    3d2c:	9c 83       	std	Y+4, r25	; 0x04
    3d2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d30:	8d 81       	ldd	r24, Y+5	; 0x05
    3d32:	9e 81       	ldd	r25, Y+6	; 0x06
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	9e 83       	std	Y+6, r25	; 0x06
    3d38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3e:	00 97       	sbiw	r24, 0x00	; 0
    3d40:	69 f7       	brne	.-38     	; 0x3d1c <main+0x8f8>
    3d42:	b3 cb       	rjmp	.-2202   	; 0x34aa <main+0x86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d44:	6f 81       	ldd	r22, Y+7	; 0x07
    3d46:	78 85       	ldd	r23, Y+8	; 0x08
    3d48:	89 85       	ldd	r24, Y+9	; 0x09
    3d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	9e 83       	std	Y+6, r25	; 0x06
    3d56:	8d 83       	std	Y+5, r24	; 0x05
    3d58:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5c:	9a 83       	std	Y+2, r25	; 0x02
    3d5e:	89 83       	std	Y+1, r24	; 0x01
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	9a 81       	ldd	r25, Y+2	; 0x02
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	f1 f7       	brne	.-4      	; 0x3d64 <main+0x940>
    3d68:	9a 83       	std	Y+2, r25	; 0x02
    3d6a:	89 83       	std	Y+1, r24	; 0x01
    3d6c:	9e cb       	rjmp	.-2244   	; 0x34aa <main+0x86>

00003d6e <__prologue_saves__>:
    3d6e:	2f 92       	push	r2
    3d70:	3f 92       	push	r3
    3d72:	4f 92       	push	r4
    3d74:	5f 92       	push	r5
    3d76:	6f 92       	push	r6
    3d78:	7f 92       	push	r7
    3d7a:	8f 92       	push	r8
    3d7c:	9f 92       	push	r9
    3d7e:	af 92       	push	r10
    3d80:	bf 92       	push	r11
    3d82:	cf 92       	push	r12
    3d84:	df 92       	push	r13
    3d86:	ef 92       	push	r14
    3d88:	ff 92       	push	r15
    3d8a:	0f 93       	push	r16
    3d8c:	1f 93       	push	r17
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
    3d96:	ca 1b       	sub	r28, r26
    3d98:	db 0b       	sbc	r29, r27
    3d9a:	0f b6       	in	r0, 0x3f	; 63
    3d9c:	f8 94       	cli
    3d9e:	de bf       	out	0x3e, r29	; 62
    3da0:	0f be       	out	0x3f, r0	; 63
    3da2:	cd bf       	out	0x3d, r28	; 61
    3da4:	09 94       	ijmp

00003da6 <__epilogue_restores__>:
    3da6:	2a 88       	ldd	r2, Y+18	; 0x12
    3da8:	39 88       	ldd	r3, Y+17	; 0x11
    3daa:	48 88       	ldd	r4, Y+16	; 0x10
    3dac:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dae:	6e 84       	ldd	r6, Y+14	; 0x0e
    3db0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3db2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3db4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3db6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3db8:	b9 84       	ldd	r11, Y+9	; 0x09
    3dba:	c8 84       	ldd	r12, Y+8	; 0x08
    3dbc:	df 80       	ldd	r13, Y+7	; 0x07
    3dbe:	ee 80       	ldd	r14, Y+6	; 0x06
    3dc0:	fd 80       	ldd	r15, Y+5	; 0x05
    3dc2:	0c 81       	ldd	r16, Y+4	; 0x04
    3dc4:	1b 81       	ldd	r17, Y+3	; 0x03
    3dc6:	aa 81       	ldd	r26, Y+2	; 0x02
    3dc8:	b9 81       	ldd	r27, Y+1	; 0x01
    3dca:	ce 0f       	add	r28, r30
    3dcc:	d1 1d       	adc	r29, r1
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	f8 94       	cli
    3dd2:	de bf       	out	0x3e, r29	; 62
    3dd4:	0f be       	out	0x3f, r0	; 63
    3dd6:	cd bf       	out	0x3d, r28	; 61
    3dd8:	ed 01       	movw	r28, r26
    3dda:	08 95       	ret

00003ddc <_exit>:
    3ddc:	f8 94       	cli

00003dde <__stop_program>:
    3dde:	ff cf       	rjmp	.-2      	; 0x3dde <__stop_program>
